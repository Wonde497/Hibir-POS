Index: app/src/main/java/net/geidea/payment/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.geidea.payment\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.animation.AnimationUtils\r\nimport androidx.databinding.DataBindingUtil\r\nimport com.pos.sdk.security.POIHsmManage\r\nimport com.pos.sdk.security.PedKcvInfo\r\nimport com.pos.sdk.security.PedKeyInfo\r\nimport com.pos.sdk.utils.PosUtils\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.delay\r\nimport net.geidea.payment.databinding.ActivitySplashBinding\r\nimport net.geidea.payment.kernelconfig.view.KernelConfigActivity\r\nimport net.geidea.payment.usbcomm.USBCommunicationActivity.Companion.TAG\r\nimport net.geidea.payment.utils.IS_KERNEL_CONFIG_COMPLETED\r\nimport net.geidea.payment.utils.KEY_ALG_3DES\r\nimport net.geidea.payment.utils.MASTER_KEY_INDEX\r\nimport net.geidea.payment.utils.PED_NO_PROTECT_KEY\r\nimport net.geidea.payment.utils.PED_NO_PROTECT_KEY_INDEX\r\nimport net.geidea.payment.utils.SESSION_DATA_KEY_INDEX\r\nimport net.geidea.payment.utils.SESSION_MAC_KEY_INDEX\r\nimport net.geidea.payment.utils.SESSION_PIN_KEY_INDEX\r\nimport net.geidea.payment.utils.TAK_3DES_DATA\r\nimport net.geidea.payment.utils.TDK_3DES_DATA\r\nimport net.geidea.payment.utils.TMK_3DES_DATA\r\nimport net.geidea.payment.utils.TPK_3DES_DATA\r\nimport net.geidea.payment.utils.pinBlockType\r\nimport net.geidea.utils.DataStoreUtils\r\nimport net.geidea.utils.extension.ioCoroutine\r\n\r\n\r\n@AndroidEntryPoint\r\nclass SplashActivity : AppCompatActivity() {\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    private lateinit var editor: SharedPreferences.Editor\r\n    private lateinit var binding: ActivitySplashBinding\r\n    private lateinit var dbHandler: DBHandler\r\n    private lateinit var main: MainActivity\r\n    private val pedKcvInfo = PedKcvInfo(0, ByteArray(5))\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_splash)\r\n        binding.splashImage.startAnimation(\r\n            AnimationUtils.loadAnimation(\r\n                this,\r\n                R.anim.splash_animation\r\n            )\r\n        )\r\n\r\n             dbHandler=DBHandler(this)\r\n        var isAdminLoggedIn=dbHandler.checkAdmin()\r\n        var isTIDRegistered=dbHandler.checkTID()\r\n        var isMIDRegistered=dbHandler.checkMID()\r\n        var isMerchantNameRegistered=dbHandler.checkMerchantName()\r\n        var isMerchantAddressRegisterd=dbHandler.checkMerchantAddress()\r\n        sharedPreferences=getSharedPreferences(\"SHARED_DATA\", Context.MODE_PRIVATE)\r\n        editor=sharedPreferences.edit()\r\n\r\n        ioCoroutine {\r\n            delay(2000)\r\n            val isKernelConfigured = DataStoreUtils.getInstance(this@SplashActivity).getBoolean(\r\n                IS_KERNEL_CONFIG_COMPLETED\r\n            ) ?: false\r\n            pinBlockType = \"mksk\"\r\n          injectMKSKey()\r\n         if (isKernelConfigured) {\r\n\r\n                if(isAdminLoggedIn){\r\n                        if(isTIDRegistered){\r\n                            if(isMIDRegistered){\r\n                                if(isMerchantNameRegistered){\r\n                                    if(isMerchantAddressRegisterd){\r\n                                        if(sharedPreferences.getBoolean(\"MERCHANT MODE\",false)==true){\r\n                                            if(sharedPreferences.getString(\"Currency\",\"\")==\"ETB\"||sharedPreferences.getString(\"Currency\",\"\")==\"USD\"||sharedPreferences.getString(\"Currency\",\"\")==\"EURO\"){\r\n                                                if(sharedPreferences.getBoolean(\"4G Data\",false)==true||sharedPreferences.getBoolean(\"WiFi\",false)==true){\r\n                                                    val intent = Intent(this@SplashActivity, MainMenuActivity::class.java)\r\n                                                    startActivity(intent)\r\n                                                    finish()\r\n                                                }else{\r\n                                                    val intent = Intent(this@SplashActivity, RegisterCommunicationMode::class.java)\r\n                                                    startActivity(intent)\r\n                                                    finish()\r\n                                                }\r\n\r\n                                            }else{\r\n                                                val intent = Intent(this@SplashActivity, RegisterCurrency::class.java)\r\n                                                startActivity(intent)\r\n                                                finish()\r\n                                            }\r\n\r\n                                        }else{\r\n                                            val intent = Intent(this@SplashActivity, RegisterTerminalMode::class.java)\r\n                                            startActivity(intent)\r\n                                            finish()\r\n                                        }\r\n\r\n\r\n                                    }else{\r\n                                        val intent = Intent(this@SplashActivity, RegisterMerchantAddress::class.java)\r\n                                        startActivity(intent)\r\n                                        finish()\r\n                                    }\r\n\r\n                                }else{\r\n                                    val intent = Intent(this@SplashActivity, RegisterMerchantName::class.java)\r\n                                    startActivity(intent)\r\n                                    finish()\r\n                                }\r\n\r\n                                  }else{\r\n                               val intent = Intent(this@SplashActivity, RegisterMID::class.java)\r\n                               startActivity(intent)\r\n                               finish()\r\n                                    }\r\n\r\n                                   }else{\r\n                                       val intent = Intent(this@SplashActivity, RegisterTID::class.java)\r\n                                        startActivity(intent)\r\n                                        finish()\r\n                                           }\r\n\r\n\r\n\r\n                              }else{\r\n                                  val intent = Intent(this@SplashActivity, RegisterAdmin::class.java)\r\n                              startActivity(intent)\r\n                              finish()\r\n\r\n                }\r\n//             val intent=Intent(this,MainMenuActivity::class.java)\r\n//             startActivity(intent)\r\n        } else {\r\n                val intent=Intent(this,KernelConfigActivity::class.java)\r\n                startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n    private fun injectMKSKey() {\r\n\r\n        // TMK: the master key of the terminal, which will be used to decrypt the session-data,tpk(pin block) and mac(tak) key\r\n        var result = updateKeyMKSK(\r\n            PED_NO_PROTECT_KEY,\r\n            PED_NO_PROTECT_KEY_INDEX,\r\n            TMK_3DES_DATA,\r\n            POIHsmManage.PED_TMK,\r\n            MASTER_KEY_INDEX\r\n        )\r\n        if (result != 0) {\r\n            Log.d(TAG, \"injectMKSK: updateKeyMKSK PED_TMK failed\")\r\n            // return\r\n        }else {\r\n            Log.d(TAG, \"injectMKSK: updateKeyMKSK PED_TMK succeed\")\r\n            Log.d(TAG, pedKcvInfo.toString())\r\n        }\r\n        // TDK: the session key which is used to encrypt data\r\n        result = updateKeyMKSK(\r\n            POIHsmManage.PED_TMK,\r\n            MASTER_KEY_INDEX,\r\n            TDK_3DES_DATA,\r\n            POIHsmManage.PED_TDK,\r\n            SESSION_DATA_KEY_INDEX\r\n        )\r\n        if (result != 0) {\r\n            Log.d(\r\n                TAG, \"injectMKSK: updateKeyMKSK PED_TDK failed\"\r\n            )\r\n            //return\r\n        }else Log.d(TAG, \"injectMKSK: updateKeyMKSK PED_TDK succeed\")\r\n\r\n\r\n\r\n        // TAK: the session key that is used to generate MAC for the message\r\n        result = updateKeyMKSK(\r\n            POIHsmManage.PED_TMK,\r\n            MASTER_KEY_INDEX,\r\n            TAK_3DES_DATA,\r\n            POIHsmManage.PED_TAK,\r\n            SESSION_MAC_KEY_INDEX\r\n        )\r\n        if (result != 0) {\r\n            Log.d(\r\n                TAG, \"injectMKSK: updateKeyMKSK PED_TAK failed\"\r\n            )\r\n            //return\r\n        }else{\r\n            Log.d(TAG, \"injectMKSK: updateKeyMKSK PED_TAK succeed\")\r\n\r\n        }\r\n\r\n    }\r\n    private fun updateKeyMKSK(\r\n        protectKeyType: Int, protectKeyIndex: Int, Keydata: String, keyType: Int, keyIndex: Int\r\n    ): Int {\r\n        Log.d(\"TAG\",\"updateKeyMKSN clicked\")\r\n        Log.d(\"TAG\",\"kcv1..........\"+pedKcvInfo)\r\n        val keyData = PosUtils.hexStringToBytes(Keydata)\r\n        Log.d(\"TAG\",\"key data...\"+Keydata)\r\n        Log.d(\"TAG\",\"keyType...\"+keyType)\r\n        Log.d(\"TAG\",\"keyIndex...\"+keyIndex)\r\n        val mkInfo = PedKeyInfo(\r\n            protectKeyType, protectKeyIndex, keyType, keyIndex, KEY_ALG_3DES, keyData.size, keyData\r\n        )\r\n        return POIHsmManage.getDefault().PedWriteKey(\r\n            mkInfo, pedKcvInfo\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/geidea/payment/SplashActivity.kt b/app/src/main/java/net/geidea/payment/SplashActivity.kt
--- a/app/src/main/java/net/geidea/payment/SplashActivity.kt	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/app/src/main/java/net/geidea/payment/SplashActivity.kt	(date 1729503400031)
@@ -40,7 +40,7 @@
     private lateinit var editor: SharedPreferences.Editor
     private lateinit var binding: ActivitySplashBinding
     private lateinit var dbHandler: DBHandler
-    private lateinit var main: MainActivity
+    //private lateinit var main: MainActivity
     private val pedKcvInfo = PedKcvInfo(0, ByteArray(5))
 
 
@@ -56,11 +56,11 @@
         )
 
              dbHandler=DBHandler(this)
-        var isAdminLoggedIn=dbHandler.checkAdmin()
-        var isTIDRegistered=dbHandler.checkTID()
-        var isMIDRegistered=dbHandler.checkMID()
-        var isMerchantNameRegistered=dbHandler.checkMerchantName()
-        var isMerchantAddressRegisterd=dbHandler.checkMerchantAddress()
+        val isAdminLoggedIn=dbHandler.checkAdmin()
+        val isTIDRegistered=dbHandler.checkTID()
+        val isMIDRegistered=dbHandler.checkMID()
+        val isMerchantNameRegistered=dbHandler.checkMerchantName()
+        val isMerchantAddressRegisterd=dbHandler.checkMerchantAddress()
         sharedPreferences=getSharedPreferences("SHARED_DATA", Context.MODE_PRIVATE)
         editor=sharedPreferences.edit()
 
@@ -200,11 +200,11 @@
         protectKeyType: Int, protectKeyIndex: Int, Keydata: String, keyType: Int, keyIndex: Int
     ): Int {
         Log.d("TAG","updateKeyMKSN clicked")
-        Log.d("TAG","kcv1.........."+pedKcvInfo)
+        Log.d("TAG", "kcv1..........$pedKcvInfo")
         val keyData = PosUtils.hexStringToBytes(Keydata)
-        Log.d("TAG","key data..."+Keydata)
-        Log.d("TAG","keyType..."+keyType)
-        Log.d("TAG","keyIndex..."+keyIndex)
+        Log.d("TAG", "key data...$Keydata")
+        Log.d("TAG", "keyType...$keyType")
+        Log.d("TAG", "keyIndex...$keyIndex")
         val mkInfo = PedKeyInfo(
             protectKeyType, protectKeyIndex, keyType, keyIndex, KEY_ALG_3DES, keyData.size, keyData
         )
Index: app/src/main/java/net/geidea/payment/MainMenuActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.geidea.payment\r\n\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.SharedPreferences.Editor\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.Gravity\r\nimport android.view.Window\r\nimport android.view.WindowManager\r\nimport android.widget.ImageButton\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.databinding.DataBindingUtil\r\nimport com.pos.sdk.security.PedKcvInfo\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport net.geidea.payment.customdialog.DialogLogoutConfirm\r\nimport net.geidea.payment.databinding.ActivityMainMenuBinding\r\nimport net.geidea.payment.help.HelpMainActivity\r\nimport net.geidea.payment.login.LoginMainActivity\r\nimport net.geidea.payment.report.Report\r\nimport net.geidea.payment.users.cashier.CashierMainActivity\r\nimport net.geidea.payment.users.supervisor.SupervisorManageCashierActivity\r\nimport net.geidea.payment.utils.commonMethods\r\n\r\n@AndroidEntryPoint\r\nclass MainMenuActivity : AppCompatActivity() {\r\n    private val TAG = \"MainMenuActivity\" // For logging purposes\r\n    private lateinit var binding: ActivityMainMenuBinding // Binding object for layout\r\n    private lateinit var actionBarDrawerToggle: ActionBarDrawerToggle // For managing the drawer layout\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    private lateinit var editor: SharedPreferences.Editor\r\n    private val imageResIds = listOf(\r\n        R.drawable.nib_logo,\r\n        R.drawable.nib_card,\r\n        R.drawable.nib_platinum_card1,\r\n        R.drawable.nib_ussd,\r\n        R.drawable.nib_support,\r\n        R.drawable.nib_25th,\r\n        R.drawable.nib_slogan\r\n    )\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        Log.d(\"TAG\", TAG)\r\n\r\n        // Inflate the layout using DataBindingUtil\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_main_menu)\r\n        sharedPreferences=getSharedPreferences(\"SHARED_DATA\", Context.MODE_PRIVATE)\r\n        editor=sharedPreferences.edit()\r\n\r\n        // Setup ActionBarDrawerToggle for navigation drawer\r\n        actionBarDrawerToggle = ActionBarDrawerToggle(\r\n            this, binding.drawerLayout, R.string.open, R.string.close\r\n        )\r\n        binding.drawerLayout.addDrawerListener(actionBarDrawerToggle)\r\n        actionBarDrawerToggle.syncState()\r\n\r\n        // Set up toolbar navigation icon click listener\r\n        binding.toolbar.navIcon?.setOnClickListener {\r\n            binding.drawerLayout.openDrawer(GravityCompat.START)\r\n        }\r\n\r\n        // Set up ItemCLickListener for Navigation View\r\n        navItemCLickListener()\r\n        // Set up OnClickListeners for CardViews\r\n        setUpCardViewListeners()\r\n        // Set up ViewPager\r\n        setupViewPager()\r\n\r\n        // Set onClickListeners for ImageButtons\r\n        setUpImageButtonListeners()\r\n\r\n    }\r\n\r\n    // Function to handle navigation item clicks\r\n    private fun navItemCLickListener() {\r\n        binding.navigationView.setNavigationItemSelectedListener { menuItem ->\r\n            binding.drawerLayout.closeDrawer(GravityCompat.START)\r\n            when (menuItem.itemId) {\r\n                R.id.nav_home -> {\r\n                    Toast.makeText(this, \"Home\", Toast.LENGTH_SHORT).show()\r\n                  var  rep = Report(this,this)\r\n                    //rep.printdetailedReport()\r\n                    rep.printsummaryReport()\r\n\r\n                }\r\n                R.id.nav_settings -> {\r\n                    Toast.makeText(this, \"Settings\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                R.id.nav_help -> {\r\n                    startActivity(Intent(this, HelpMainActivity::class.java))\r\n                }\r\n                R.id.nav_about -> {\r\n                    Toast.makeText(this, \"About\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                R.id.nav_share -> {\r\n                    Toast.makeText(this, \"Share\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                R.id.nav_exit -> {\r\n                    val exitDialog = DialogLogoutConfirm(\r\n                        this,\r\n                        title = \"Exit App\",\r\n                        message = \"Are you sure you want to close the app?\",\r\n                        cancelBtn = \"Cancel\",\r\n                        logoutBtn = \"Exit\"\r\n                    ) {\r\n                        // Perform your exit app action here\r\n                        finish() // Close the app\r\n                    }\r\n                    exitDialog.show()\r\n                }\r\n\r\n                else -> false\r\n            }\r\n            true\r\n        }\r\n    }\r\n    private fun setUpCardViewListeners() {\r\n        binding.topCardView.setOnClickListener {\r\n           showTransactionBottomSheet()\r\n        }\r\n        binding.cardView1.setOnClickListener {\r\n            //Toast.makeText(this, \"CardView 1 clicked\", Toast.LENGTH_SHORT).show()\r\n            sharedPreferences=getSharedPreferences(\"SHARED_DATA\", Context.MODE_PRIVATE)\r\n            val intent = Intent(this@MainMenuActivity, LoginMainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.cardView2.setOnClickListener {\r\n            editor.putString(\"TXN_TYPE\",Txntype.purchase)\r\n            editor.commit()\r\n           // Toast.makeText(this, \"CardView 2 clicked\", Toast.LENGTH_SHORT).show()\r\n            val intent = Intent(this@MainMenuActivity, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.cardView3.setOnClickListener {\r\n           // Toast.makeText(this, \"CardView 3 clicked\", Toast.LENGTH_SHORT).show()\r\n            sharedPreferences=getSharedPreferences(\"SHARED_DATA\", Context.MODE_PRIVATE)\r\n            val intent = Intent(this@MainMenuActivity, CashierMainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.cardView4.setOnClickListener {\r\n            //Toast.makeText(this, \"CardView 4 clicked\", Toast.LENGTH_SHORT).show()\r\n            val intent = Intent(this@MainMenuActivity, HelpMainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    // Set onClickListeners for ImageButtons\r\n    private fun setUpImageButtonListeners() {\r\n        binding.transactionsImagebtn.setOnClickListener {\r\n           showTransactionBottomSheet()\r\n        }\r\n\r\n        binding.mainMenuLogin.setOnClickListener {\r\n            sharedPreferences=getSharedPreferences(\"SHARED_DATA\", Context.MODE_PRIVATE)\r\n            val intent = Intent(this@MainMenuActivity, LoginMainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.mainMenuSale.setOnClickListener {\r\n            editor.putString(\"TXN_TYPE\",Txntype.purchase)\r\n            editor.commit()\r\n            //Toast.makeText(this, \"CardView 2 clicked\", Toast.LENGTH_SHORT).show()\r\n            val intent = Intent(this@MainMenuActivity, MainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.mainMenuCashier.setOnClickListener {\r\n            sharedPreferences=getSharedPreferences(\"SHARED_DATA\", Context.MODE_PRIVATE)\r\n            val intent = Intent(this@MainMenuActivity, CashierMainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.mainMenuHelp.setOnClickListener {\r\n            sharedPreferences=getSharedPreferences(\"SHARED_DATA\", Context.MODE_PRIVATE)\r\n            val intent = Intent(this@MainMenuActivity, HelpMainActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n    private fun setupViewPager() {\r\n        val adapter = ImageSliderAdapter(imageResIds)\r\n        binding.viewPager.adapter = adapter\r\n\r\n        // Automatically scroll the ViewPager\r\n        val handler = Handler(Looper.getMainLooper())\r\n        val runnable = object : Runnable {\r\n            override fun run() {\r\n                val currentItem = binding.viewPager.currentItem\r\n                val nextItem = if (currentItem + 1 < imageResIds.size) currentItem + 1 else 0\r\n                binding.viewPager.setCurrentItem(nextItem, true)\r\n                handler.postDelayed(this, 2000) // Adjust the delay as needed\r\n            }\r\n        }\r\n        handler.postDelayed(runnable, 2000)\r\n    }\r\n\r\n\r\n    private fun showTransactionBottomSheet() {\r\n        val dialog = Dialog(this)\r\n        try {\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\r\n            dialog.window?.setBackgroundDrawableResource(R.drawable.dialog_background)\r\n            dialog.setContentView(R.layout.dialog_transactions)\r\n            val saleBtn=dialog.findViewById <ImageButton>(R.id.transaction_sale_icon)\r\n            val reversalBtn=dialog.findViewById<ImageButton>(R.id.transaction_reversal_icon)\r\n            val closeDialogBtn=dialog.findViewById <ImageButton>(R.id.closeDialog)\r\n            saleBtn.setOnClickListener {\r\n                editor.putString(\"TXN_TYPE\",Txntype.purchase)\r\n                editor.commit()\r\n                startActivity(Intent(this,MainActivity::class.java))\r\n            }\r\n            reversalBtn.setOnClickListener {\r\n                editor.putString(\"TXN_TYPE\",Txntype.reversal)\r\n                editor.commit()\r\n                startActivity(Intent(this,ReversalActivity::class.java))\r\n\r\n\r\n            }\r\n            closeDialogBtn.setOnClickListener{\r\n                dialog.dismiss()\r\n            }\r\n\r\n            val window = dialog.window\r\n            window?.let {\r\n                val layoutParams = WindowManager.LayoutParams()\r\n                layoutParams.copyFrom(it.attributes)\r\n                layoutParams.width = WindowManager.LayoutParams.MATCH_PARENT\r\n                layoutParams.height = (resources.displayMetrics.heightPixels * 0.7).toInt()\r\n                layoutParams.gravity = Gravity.BOTTOM\r\n                it.attributes = layoutParams\r\n            }\r\n\r\n            dialog.show()\r\n        } catch (e: Exception) {\r\n            Log.e(\"DialogError\", \"Failed to create or show dialog\", e)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/geidea/payment/MainMenuActivity.kt b/app/src/main/java/net/geidea/payment/MainMenuActivity.kt
--- a/app/src/main/java/net/geidea/payment/MainMenuActivity.kt	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/app/src/main/java/net/geidea/payment/MainMenuActivity.kt	(date 1729581579828)
@@ -213,6 +213,7 @@
             dialog.setContentView(R.layout.dialog_transactions)
             val saleBtn=dialog.findViewById <ImageButton>(R.id.transaction_sale_icon)
             val reversalBtn=dialog.findViewById<ImageButton>(R.id.transaction_reversal_icon)
+
             val closeDialogBtn=dialog.findViewById <ImageButton>(R.id.closeDialog)
             saleBtn.setOnClickListener {
                 editor.putString("TXN_TYPE",Txntype.purchase)
Index: app/src/main/java/net/geidea/payment/transaction/model/TransData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.geidea.payment.transaction.model\r\n\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.content.SharedPreferences.Editor\r\nimport android.icu.text.SimpleDateFormat\r\nimport android.util.Log\r\nimport androidx.annotation.Keep\r\nimport net.geidea.payment.DBHandler\r\nimport net.geidea.payment.Txntype\r\nimport net.geidea.payment.report.Report\r\nimport net.geidea.payment.tlv.HexUtil\r\nimport java.nio.ByteBuffer\r\nimport java.util.Date\r\nimport java.util.Locale\r\n\r\n@Keep\r\nclass TransData(private val context:Context) {\r\n    val sharedPreferences=context.getSharedPreferences(\"SHARED_DATA\",Context.MODE_PRIVATE)\r\n    private lateinit var editor: SharedPreferences.Editor\r\n\r\n\r\n    var txnType=sharedPreferences.getString(\"TXN_TYPE\",\"\")\r\n\r\n    var entryMode:String = \"\"\r\n    var cardLabelNameEng = \"\"\r\n    var isOnlinePin=false\r\n    var amount:Long = 0L\r\n    var pinBlock = \"\"\r\n    var transactionReqDateTime = \"\"\r\n    var aid = \"\"\r\n    var rrn = \"\"\r\n    var stan = \"\"\r\n    var transactionStatus = false\r\n    var transactionType = \"\"\r\n    var genACResult = \"\"\r\n    var pan = \"\"\r\n    var applicationCryptogram = \"\"\r\n    var cardExpiryDate = \"\"\r\n    var verificationMethod = 0\r\n    val TAG=\"TransData\"\r\n    var track2=\"\"\r\n\r\n    override fun toString(): String {\r\n        return \"TransData(\" +\r\n                \"entryMode='$entryMode', \" +\r\n                \"cardLabelNameEng='$cardLabelNameEng', \" +\r\n                \"isOnlinePin=$isOnlinePin, \" +\r\n                \"amount=$amount, \" +\r\n                \"pinBlock='$pinBlock', \" +\r\n                \"transactionReqDateTime='$transactionReqDateTime', \" +\r\n                \"aid='$aid', \" +\r\n                \"rrn='$rrn', \" +\r\n                \"stan='$stan', \" +\r\n                \"transactionStatus=$transactionStatus, \" +\r\n                \"transactionType='$transactionType', \" +\r\n                \"genACResult='$genACResult', \" +\r\n                \"pan='$pan', \" +\r\n                \"applicationCryptogram='$applicationCryptogram', \" +\r\n                \"cardExpiryDate='$cardExpiryDate', \" +\r\n                \"verificationMethod=$verificationMethod\" +\r\n                \")\"\r\n    }\r\n    class RequestFields{\r\n        companion object{\r\n            var Header=\"\"\r\n            var MTI=\"\"\r\n            var primaryBitmap=\"\"\r\n            var Field02=\"\"\r\n            var Field03=\"\"\r\n            var Field04=\"\"\r\n            var Field07=\"\"\r\n            var Field11=\"\"\r\n            var Field12=\"\"\r\n            var Field13=\"\"\r\n            var Field14=\"\"\r\n            var Field22=\"0051\"\r\n            var Field24=\"0001\"\r\n            var Field25=\"00\"\r\n            var Field35=\"\"\r\n            var Field37=\"\"\r\n            var Field38=\"\"\r\n            var Field39= \"\"\r\n            var Field41=\"\"\r\n            var Field42=\"\"\r\n            var Field49=\"230\"\r\n            var Field52=\"\"\r\n            var Field55=\"\"\r\n            var Field60=\"0012\"\r\n            var Field62=\"0006\"\r\n            var Field63=\"\"\r\n            var endValue4F63=\"\"\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    class ResponseFields{\r\n        companion object{\r\n            var Header=\"\"\r\n            var MTI=\"\"\r\n            var primaryBitmap=\"\"\r\n            var Field02=\"\"\r\n            var Field03=\"\"\r\n            var Field04=\"\"\r\n            var Field07=\"\"\r\n            var Field11=\"\"\r\n            var Field12=\"\"\r\n            var Field13=\"\"\r\n            var Field22=\"\"\r\n            var Field24=\"200\"\r\n            var Field25=\"00\"\r\n            var Field35=\"\"\r\n            var Field37=\"\"\r\n            var Field38=\"\"\r\n            var Field39=\"\"\r\n            var Field41=\"\"\r\n            var Field42=\"\"\r\n            var Field49=\"\"\r\n            var Field52=\"\"\r\n            var Field55=\"\"\r\n            var Field62=\"\"\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    fun assignValue2Fields(){\r\n\r\n        var txnType=sharedPreferences.getString(\"TXN_TYPE\",\"\")\r\n        if(!txnType.equals(Txntype.keydownload) && !txnType.equals(Txntype.settlement) && !txnType.equals(Txntype.reversal)) {\r\n            Log.d(TAG, \"txntype2:\" + txnType)\r\n\r\n            RequestFields.Field11 = stan\r\n            Log.d(TAG, \"stankd:\" + RequestFields.Field11)\r\n        }\r\n        //ClearVariables()\r\n      //  txnType=sharedPreferences.getString(\"TXN_TYPE\",\"\")\r\n        Log.d(TAG,\"txn type\"+txnType)\r\n        Log.d(TAG,\"entry mode\"+entryMode)\r\n        if(txnType.equals(Txntype.purchase)){\r\n            if(entryMode.equals(EntryMode.CONTACTLESS)){\r\n                Log.d(TAG,\"txn type\"+txnType)\r\n                RequestFields.Field22=\"0070\"\r\n            }else  RequestFields.Field22=\"0051\"\r\n\r\n\r\n            RequestFields. Header=\"30606020153535\"\r\n            RequestFields.MTI=\"0200\"\r\n            RequestFields.Field25=\"00\"\r\n            RequestFields.Field62=\"0006\"\r\n\r\n            if(isOnlinePin){\r\n                RequestFields.primaryBitmap=\"7024058020C01204\"\r\n\r\n            }else RequestFields.primaryBitmap=\"7024058020C00204\"\r\n\r\n            RequestFields.Field03=\"000000\"\r\n//bitmap for online pin\r\n        } else if(txnType.equals(Txntype.reversal)){\r\n            RequestFields. Header=\"30606020153535\"\r\n            RequestFields.MTI=\"0200\"\r\n            RequestFields.primaryBitmap=\"703C05802EC00014\"\r\n            RequestFields.Field03=\"020000\"\r\n            if(entryMode.equals(EntryMode.CONTACTLESS)){\r\n                RequestFields.Field22=\"0070\"\r\n            }\r\n        }\r\n\r\n\r\n\r\n        RequestFields.Field02=pan\r\n\r\n        // RequestFields.Field07= SimpleDateFormat(\"MMddhhmmss\", Locale.getDefault()).format(Date())\r\n        Log.d(TAG, \"trantype:\" + txnType)\r\n\r\n        // RequestFields.Field12=SimpleDateFormat(\"yyMMddhhmmss\", Locale.getDefault()).format( Date())\r\n        if(!txnType.equals(Txntype.keydownload) ){\r\n                RequestFields.Field14 = cardExpiryDate.substring(0, 4)//+\"01\"\r\n            }\r\n        Log.d(TAG,\"Field14:\"+RequestFields.Field14)\r\n\r\n         if(RequestFields.Field35.endsWith(\"F\")){\r\n            RequestFields.Field35=RequestFields.Field35.substringBefore(\"F\")\r\n\r\n          }\r\n\r\n        Log.d(TAG,\"Field35:\"+RequestFields.Field35)\r\n        val dbHandler=DBHandler(context)\r\n        RequestFields.Field41=dbHandler.getTID()//\"TID12345\"\r\n        Log.d(TAG,\"terminalID:\"+RequestFields.Field41)\r\n        RequestFields.Field42=dbHandler.getMID()//\"MID123456789012\"\r\n        Log.d(TAG,\"merchantID:\"+RequestFields.Field42)\r\n        //RequestFields.Field52\r\n        Log.d(TAG,\"Field52:\"+RequestFields.Field52)\r\n\r\n    }\r\n    fun packRequestFields():ByteArray {\r\n        //ClearVariables()\r\n        var j = 0\r\n        var i = 0\r\n        var fieldLength=0\r\n        //   listOfByteArrays=\"\".toByteArray()\r\n        var listOfByteArraysHeader = mutableListOf<ByteArray>()\r\n        var listOfByteArraysMTI = mutableListOf<ByteArray>()\r\n        var listOfByteArraysBMP = mutableListOf<ByteArray>()\r\n        var lengthOfHeader=0\r\n        var lengthOfMTI=0\r\n\r\n        var lengthOfBitmap = 0\r\n\r\n        var charArrayHeader=\"\".toCharArray()\r\n        var charArrayMTI=\"\".toCharArray()\r\n        var charArrayBmp=\"\".toCharArray()\r\n        var listOfByteArrayslenF02 = mutableListOf<ByteArray>()\r\n        var lengthOfFlen02=0\r\n        var charArraylenF02=\"\".toCharArray()\r\n\r\n        var listOfByteArraysF02 = mutableListOf<ByteArray>()\r\n        var lengthOfF02=0\r\n        var charArrayF02=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        var listOfByteArraysF03 = mutableListOf<ByteArray>()\r\n        var lengthOfF03=0\r\n        var charArrayF03=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF04 = mutableListOf<ByteArray>()\r\n        var lengthOfF04=0\r\n        var charArrayF04=\"\".toCharArray()\r\n        //   ***************************************************************\r\n//   ***************************************************************\r\n        var listOfByteArraysF11 = mutableListOf<ByteArray>()\r\n        var lengthOfF11=0\r\n        var charArrayF11=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF12 = mutableListOf<ByteArray>()\r\n        var lengthOfF12=0\r\n        var charArrayF12=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF13 = mutableListOf<ByteArray>()\r\n        var lengthOfF13=0\r\n        var charArrayF13=\"\".toCharArray()\r\n        //   ***************************************************************\r\n\r\n        //   ***************************************************************\r\n        var listOfByteArraysF14 = mutableListOf<ByteArray>()\r\n        var lengthOfF14=0\r\n        var charArrayF14=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF22 = mutableListOf<ByteArray>()\r\n        var lengthOfF22=0\r\n        var charArrayF22=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF24 = mutableListOf<ByteArray>()\r\n        var lengthOfF24=0\r\n        var charArrayF24=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF25 = mutableListOf<ByteArray>()\r\n        var lengthOfF25=0\r\n        var charArrayF25=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF35 = mutableListOf<ByteArray>()\r\n        var lengthOfF35=0\r\n        var charArrayF35=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF37 = mutableListOf<ByteArray>()\r\n        var lengthOfF37=0\r\n        var charArrayF37=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF38 = mutableListOf<ByteArray>()\r\n        var lengthOfF38=0\r\n        var charArrayF38=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF39 = mutableListOf<ByteArray>()\r\n        var lengthOfF39=0\r\n        var charArrayF39=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArrayslenF35 = mutableListOf<ByteArray>()\r\n        var lengthOflenF35=0\r\n        var charArraylenF35=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArrayslenF52 = mutableListOf<ByteArray>()\r\n        var lengthOflenF52=0\r\n        var charArraylenF52=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF52 = mutableListOf<ByteArray>()\r\n        var lengthOfF52=0\r\n        var charArrayF52=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArrayslenF55 = mutableListOf<ByteArray>()\r\n        var lengthOflenF55=0\r\n        var charArraylenF55=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF55 = mutableListOf<ByteArray>()\r\n        var lengthOfF55=0\r\n        var charArrayF55=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF60 = mutableListOf<ByteArray>()\r\n        var lengthOfF60=0\r\n        var charArrayF60=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF62 = mutableListOf<ByteArray>()\r\n        var lengthOfF62=0\r\n        var charArrayF62=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF63 = mutableListOf<ByteArray>()\r\n        var lengthOfF63=0\r\n        var charArrayF63=\"\".toCharArray()\r\n        //   ***************************************************************\r\n\r\n\r\n        Log.d(\"tag\",\"packet12 \"+RequestFields.Field11)\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Header.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Header}\")\r\n\r\n        val  header= Array(fieldLength) { \"\" }\r\n        charArrayHeader = RequestFields.Header.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            header[j] = \"${charArrayHeader[i]}${charArrayHeader[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end header/\r\n        //**************************************************************\r\n\r\n        fieldLength = RequestFields.MTI.length / 2\r\n        Log.d(\"TransData\", \"mti.........: ${RequestFields.MTI}\")\r\n\r\n        val  mti= Array(fieldLength) { \"\" }\r\n\r\n        charArrayMTI = RequestFields.MTI.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            mti[j] = \"${charArrayMTI[i]}${charArrayMTI[i + 1]}\"\r\n            j++\r\n        }\r\n        //************************************************ end mti/\r\n        val bitmaplength = RequestFields.primaryBitmap.length / 2\r\n        Log.d(\"TransData\", \"bitmaptry.........: ${RequestFields.primaryBitmap}\")\r\n\r\n        val primarybitmap = Array(bitmaplength) { \"\" }\r\n        charArrayBmp = RequestFields.primaryBitmap.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until bitmaplength * 2 step 2) {\r\n            primarybitmap[j] = \"${charArrayBmp[i]}${charArrayBmp[i + 1]}\"\r\n            j++\r\n        }\r\n        //************************************************ end bmp/\r\n\r\n//**************************************************************\r\n\r\n\r\n\r\n        //**************************************************************\r\n        val Fld02lenint=RequestFields.Field02.length\r\n        if(RequestFields.Field02.length % 2 !=0)\r\n        {\r\n            fieldLength = (Fld02lenint+1).toString().length / 2\r\n        }\r\n        else {\r\n            fieldLength = Fld02lenint.toString().length / 2\r\n        }\r\n        Log.d(\"TransData\", \"mti.........: \" + Fld02lenint)\r\n\r\n        val  Fld02lenstr= Array(fieldLength) { \"\" }\r\n\r\n        charArraylenF02 = Fld02lenint.toString().toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            Fld02lenstr[j] = \"${charArraylenF02[i]}${charArraylenF02[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        fieldLength = RequestFields.Field02.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field02}\")\r\n\r\n        val  fld02= Array(fieldLength) { \"\" }\r\n        charArrayF02 = RequestFields.Field02.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld02[j] = \"${charArrayF02[i]}${charArrayF02[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field02/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field03.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field03}\")\r\n\r\n        val  fld03= Array(fieldLength) { \"\" }\r\n        charArrayF03 = RequestFields.Field03.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld03[j] = \"${charArrayF03[i]}${charArrayF03[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field03/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field04.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field04}\")\r\n\r\n        val  fld04= Array(fieldLength) { \"\" }\r\n        charArrayF04 = RequestFields.Field04.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld04[j] = \"${charArrayF04[i]}${charArrayF04[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field04/\r\n\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field11.length / 2\r\n        Log.d(\"TransData\", \"headertryF11.........: ${RequestFields.Field11}\")\r\n\r\n        val  fld11= Array(fieldLength) { \"\" }\r\n        charArrayF11 = RequestFields.Field11.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld11[j] = \"${charArrayF11[i]}${charArrayF11[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field11/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field12.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field12}\")\r\n\r\n        val  fld12= Array(fieldLength) { \"\" }\r\n        charArrayF12 = RequestFields.Field12.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld12[j] = \"${charArrayF12[i]}${charArrayF12[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field12/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field13.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field13}\")\r\n\r\n        val  fld13= Array(fieldLength) { \"\" }\r\n        charArrayF13 = RequestFields.Field13.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld13[j] = \"${charArrayF13[i]}${charArrayF13[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field13/\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field14.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field14}\")\r\n\r\n        val  fld14= Array(fieldLength) { \"\" }\r\n        charArrayF14 = RequestFields.Field14.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld14[j] = \"${charArrayF14[i]}${charArrayF14[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field14/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field22.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field22}\")\r\n\r\n        val  fld22= Array(fieldLength) { \"\" }\r\n        charArrayF22 = RequestFields.Field22.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld22[j] = \"${charArrayF22[i]}${charArrayF22[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field22/\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field24.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field24}\")\r\n\r\n        val  fld24= Array(fieldLength) { \"\" }\r\n        charArrayF24 = RequestFields.Field24.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld24[j] = \"${charArrayF24[i]}${charArrayF24[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field24/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field25.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field25}\")\r\n\r\n        val  fld25= Array(fieldLength) { \"\" }\r\n        charArrayF25 = RequestFields.Field25.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld25[j] = \"${charArrayF25[i]}${charArrayF25[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field25/\r\n        //**************************************************************\r\n        val Fld35lenint=RequestFields.Field35.length\r\n        if(RequestFields.Field35.length % 2 !=0)\r\n        {\r\n            fieldLength = (Fld35lenint+1).toString().length / 2\r\n        }\r\n        else {\r\n            fieldLength = Fld35lenint.toString().length / 2\r\n        }\r\n        Log.d(\"TransData\", \"mti.........: \" + Fld35lenint)\r\n\r\n        val fld35len  = Array(fieldLength) { \"\" }\r\n\r\n        charArraylenF35 = Fld35lenint.toString().toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld35len[j] = \"${charArraylenF35[i]}${charArraylenF35[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field35.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field35}\")\r\n\r\n        val  fld35= Array(fieldLength) { \"\" }\r\n        charArrayF35 = RequestFields.Field35.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld35[j] = \"${charArrayF35[i]}${charArrayF35[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field35/\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field37.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field37}\")\r\n\r\n        val  fld37= Array(fieldLength) { \"\" }\r\n        charArrayF37 = RequestFields.Field37.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld37[j] = \"${charArrayF37[i]}${charArrayF37[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field37/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field38.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field38}\")\r\n\r\n        val  fld38= Array(fieldLength) { \"\" }\r\n        charArrayF38 = RequestFields.Field38.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld38[j] = \"${charArrayF38[i]}${charArrayF38[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field38/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field39.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field39}\")\r\n\r\n        val  fld39= Array(fieldLength) { \"\" }\r\n        charArrayF39 = RequestFields.Field39.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld39[j] = \"${charArrayF39[i]}${charArrayF39[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field39/\r\n\r\n        //listOfByteArrays = mutableListOf<ByteArray>()\r\n        for (r in header.indices) {\r\n            listOfByteArraysHeader.add(HexUtil.hexStr2Byte(header[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysHeader\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysHeader) {\r\n            lengthOfHeader += byteArray1.size\r\n        }\r\n//*************************************************\r\n        for (r in mti.indices) {\r\n            listOfByteArraysMTI.add(HexUtil.hexStr2Byte(mti[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysMTI\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysMTI) {\r\n            lengthOfMTI += byteArray1.size\r\n        }\r\n        //val listOfByteArrays1 = mutableListOf<ByteArray>()\r\n        for (r in primarybitmap.indices) {\r\n            listOfByteArraysBMP.add(HexUtil.hexStr2Byte(primarybitmap[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays1: $listOfByteArraysBMP\")\r\n//*************************************************\r\n        lengthOfBitmap = 0\r\n        for (byteArray1 in listOfByteArraysBMP) {\r\n            lengthOfBitmap += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in Fld02lenstr.indices) {\r\n            listOfByteArrayslenF02.add(HexUtil.hexStr2Byte(Fld02lenstr[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArrayslenF02\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArrayslenF02) {\r\n            lengthOfFlen02 += byteArray1.size\r\n        }\r\n        Log.d(TAG,\"lenf02\"+lengthOfFlen02)\r\n        for (r in fld02.indices) {\r\n            listOfByteArraysF02.add(HexUtil.hexStr2Byte(fld02[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF02\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF02) {\r\n            lengthOfF02 += byteArray1.size\r\n        }\r\n        Log.d(TAG,\"lenf02\"+lengthOfF02)\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld03.indices) {\r\n            listOfByteArraysF03.add(HexUtil.hexStr2Byte(fld03[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF03\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF03) {\r\n            lengthOfF03 += byteArray1.size\r\n        }\r\n\r\n        //********************************************************\r\n        for (r in fld04.indices) {\r\n            listOfByteArraysF04.add(HexUtil.hexStr2Byte(fld04[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF04\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF04) {\r\n            lengthOfF04 += byteArray1.size\r\n        }\r\n\r\n        //********************************************************\r\n        for (r in fld11.indices) {\r\n            listOfByteArraysF11.add(HexUtil.hexStr2Byte(fld11[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arraysf1111: $listOfByteArraysF11\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF11) {\r\n            lengthOfF11 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld12.indices) {\r\n            listOfByteArraysF12.add(HexUtil.hexStr2Byte(fld12[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF12\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF12) {\r\n            lengthOfF12 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld13.indices) {\r\n            listOfByteArraysF13.add(HexUtil.hexStr2Byte(fld13[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF13\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF13) {\r\n            lengthOfF13 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld14.indices) {\r\n            listOfByteArraysF14.add(HexUtil.hexStr2Byte(fld14[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF14\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF14) {\r\n            lengthOfF14 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld22.indices) {\r\n            listOfByteArraysF22.add(HexUtil.hexStr2Byte(fld22[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF22\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF22) {\r\n            lengthOfF22 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld24.indices) {\r\n            listOfByteArraysF24.add(HexUtil.hexStr2Byte(fld24[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF24\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF24) {\r\n            lengthOfF24 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld25.indices) {\r\n            listOfByteArraysF25.add(HexUtil.hexStr2Byte(fld25[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF25\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF25) {\r\n            lengthOfF25 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld35len.indices) {\r\n            listOfByteArrayslenF35.add(HexUtil.hexStr2Byte(fld35len[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArrayslenF35\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArrayslenF35) {\r\n            lengthOflenF35 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld35.indices) {\r\n            listOfByteArraysF35.add(HexUtil.hexStr2Byte(fld35[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF35\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF35) {\r\n            lengthOfF35 += byteArray1.size\r\n\r\n        }\r\n\r\n        //********************************************************\r\n        for (r in fld37.indices) {\r\n            listOfByteArraysF37.add(HexUtil.hexStr2Byte(fld37[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF37\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF37) {\r\n            lengthOfF37 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld38.indices) {\r\n            listOfByteArraysF38.add(HexUtil.hexStr2Byte(fld38[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF38\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF38) {\r\n            lengthOfF38 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld39.indices) {\r\n            listOfByteArraysF39.add(HexUtil.hexStr2Byte(fld39[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF39\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF39) {\r\n            lengthOfF39 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //*****************************************************************start of Field 60/\r\n        //***********************************************************************\r\n        fieldLength = RequestFields.Field60.length / 2\r\n        Log.d(\"TransData\", \"headertry 60.........: ${RequestFields.Field60}\")\r\n\r\n        val  fld60= Array(fieldLength) { \"\" }\r\n        charArrayF60 = RequestFields.Field60.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld60[j] = \"${charArrayF60[i]}${charArrayF60[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld60.indices) {\r\n            listOfByteArraysF60.add(HexUtil.hexStr2Byte(fld60[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arraysF60: $listOfByteArraysF60\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF60) {\r\n            lengthOfF60 += byteArray1.size\r\n        }\r\n\r\n        //***********************************************************************\r\n        fieldLength = RequestFields.Field62.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field62}\")\r\n\r\n        val  fld62= Array(fieldLength) { \"\" }\r\n        charArrayF62 = RequestFields.Field62.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld62[j] = \"${charArrayF62[i]}${charArrayF62[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld62.indices) {\r\n            listOfByteArraysF62.add(HexUtil.hexStr2Byte(fld62[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF62\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF62) {\r\n            lengthOfF62 += byteArray1.size\r\n        }\r\n        //***********************************************************************\r\n        fieldLength = RequestFields.Field63.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field63}\")\r\n\r\n        val  fld63= Array(fieldLength) { \"\" }\r\n        charArrayF63 = RequestFields.Field63.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld63[j] = \"${charArrayF63[i]}${charArrayF63[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld63.indices) {\r\n            listOfByteArraysF63.add(HexUtil.hexStr2Byte(fld63[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF63\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF63) {\r\n            lengthOfF63 += byteArray1.size\r\n        }\r\n        val f60EndValue4Settlement=HexUtil.hexStr2Byte(HexUtil.asc2Hex(\"000020\"))\r\n        val f63EndValue4Settlement=HexUtil.hexStr2Byte(HexUtil.asc2Hex(TransData.RequestFields.endValue4F63))\r\n        val field04 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field04))\r\n        val field11 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field11))\r\n        Log.d(TAG, \"f11 $field11\")\r\n\r\n        //field 02 and its length\r\n\r\n\r\n        val field41 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field41))\r\n        val field42 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field42))\r\n        val field37 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field37))\r\n        val field38 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field38))\r\n        val field39 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field39))\r\n        var  buffer: ByteBuffer? =null\r\n        if(txnType.equals(Txntype.keydownload)){\r\n\r\n           buffer=ByteBuffer.allocate(lengthOfHeader+\r\n                   lengthOfMTI+\r\n                   lengthOfBitmap+\r\n                   lengthOfF03+\r\n                   lengthOfF11+\r\n                   lengthOfF24+\r\n                   field41.size +\r\n                   field42.size+\r\n                   lengthOfF62+field11.size\r\n           )\r\n            buffer.apply {\r\n                for (byteArray1 in listOfByteArraysHeader) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysMTI) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysBMP) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF03) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF11) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF24) {\r\n                    put(byteArray1)\r\n                }\r\n                put(field41)\r\n                put(field42)\r\n                for (byteArray in listOfByteArraysF62) {\r\n                    put(byteArray)\r\n                }\r\n                Log.d(TAG, \"f11P $field11\")\r\n\r\n                put(field11)\r\n\r\n\r\n            }\r\n        }else if (txnType.equals(Txntype.settlement)){\r\n            buffer=ByteBuffer.allocate(\r\n                lengthOfHeader+\r\n                    lengthOfMTI+\r\n                    lengthOfBitmap+\r\n                    lengthOfF03+\r\n                    lengthOfF11+\r\n                    lengthOfF24+\r\n                    field41.size +\r\n                    field42.size+\r\n                    lengthOfF60+\r\n                    f60EndValue4Settlement.size+\r\n                    lengthOfF62+\r\n                    lengthOfF63+\r\n                        f63EndValue4Settlement.size\r\n            )\r\n            buffer.apply {\r\n                for (byteArray1 in listOfByteArraysHeader) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysMTI) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysBMP) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF03) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF11) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF24) {\r\n                    put(byteArray1)\r\n                }\r\n                put(field41)\r\n                put(field42)\r\n                for (byteArray in listOfByteArraysF60) {\r\n                    put(byteArray)\r\n                }\r\n                put(f60EndValue4Settlement)\r\n\r\n\r\n                for (byteArray in listOfByteArraysF62) {\r\n                    put(byteArray)\r\n                }\r\n                Log.d(TAG, \"f11P $field11\")\r\n                for (byteArray in listOfByteArraysF63) {\r\n                    put(byteArray)\r\n                }\r\n                put(f63EndValue4Settlement)\r\n\r\n\r\n\r\n\r\n        }\r\n        } else if(txnType.equals(Txntype.reversal)){\r\n\r\n            buffer = ByteBuffer.allocate(\r\n                           lengthOfHeader+\r\n                                   lengthOfMTI+\r\n                                           lengthOfBitmap+\r\n                                           lengthOfFlen02+\r\n                                           lengthOfF02+\r\n                                           lengthOfF03 +\r\n                                           lengthOfF04 +\r\n                                           lengthOfF11 +\r\n                                           lengthOfF12 +\r\n                                           lengthOfF13 +\r\n                                          lengthOfF14 +\r\n                                          lengthOfF22 +\r\n                                          lengthOfF24 +\r\n                                          lengthOfF25+\r\n                                          lengthOflenF35+\r\n                                          lengthOfF35 +\r\n                                           field37.size +\r\n                                           field38.size +\r\n                                           field39.size +\r\n                                          field41.size +\r\n                                          field42.size+\r\n                                          lengthOfF60+field04.size+\r\n                                           lengthOfF62+field11.size)\r\n        buffer.apply {\r\n            for (byteArray1 in listOfByteArraysHeader) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysMTI) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysBMP) {\r\n                put(byteArray1)\r\n            }\r\n\r\n            //for loop to put the bit map in buffer\r\n\r\n\r\n            for (byteArray1 in listOfByteArrayslenF02) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF02) {\r\n                put(byteArray1)\r\n            }\r\n\r\n            for (byteArray1 in listOfByteArraysF03) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF04) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF11) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF12) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF13) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF14) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF22) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF24) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF25) {\r\n                put(byteArray1)\r\n            }\r\n\r\n            for (byteArray1 in listOfByteArrayslenF35) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF35) {\r\n                put(byteArray1)\r\n            }\r\n            put(field37)\r\n            put(field38)\r\n            put(field39)\r\n\r\n\r\n            put(field41)\r\n            put(field42)\r\n\r\n            for (byteArray in listOfByteArraysF60) {\r\n                put(byteArray)\r\n            }\r\n            put(field04)\r\n\r\n\r\n            for (byteArray in listOfByteArraysF62) {\r\n                put(byteArray)\r\n            }\r\n            put(field11)\r\n        }\r\n        } else if(txnType.equals(Txntype.purchase)){\r\n             buffer = ByteBuffer.allocate(\r\n                 lengthOfHeader+\r\n                         lengthOfMTI+\r\n                         lengthOfBitmap +\r\n                         lengthOfFlen02+\r\n                         lengthOfF02+\r\n                         lengthOfF03 +\r\n                         lengthOfF04 +\r\n                         lengthOfF11 +\r\n                         lengthOfF14 +\r\n                         lengthOfF22 +\r\n                         lengthOfF24 +\r\n                         lengthOfF25+\r\n                         lengthOflenF35+\r\n                         lengthOfF35 +\r\n                         field41.size +\r\n                         field42.size\r\n\r\n             )\r\n\r\n\r\n             buffer?.apply {\r\n                 for (byteArray1 in listOfByteArraysHeader) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysMTI) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysBMP) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n                 //for loop to put the bit map in buffer\r\n\r\n\r\n                 for (byteArray1 in listOfByteArrayslenF02) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF02) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n                 for (byteArray1 in listOfByteArraysF03) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF04) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF11) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF14) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF22) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF24) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF25) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n                 for (byteArray1 in listOfByteArrayslenF35) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF35) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n\r\n                 put(field41)\r\n                 put(field42)\r\n\r\n             }\r\n         }\r\n        //**************************************************************\r\n\r\n         //********************************************************\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field52.length / 2\r\n        Log.d(\"TransData\", \"headertry52.........: ${RequestFields.Field52}\")\r\n\r\n        val  fld52= Array(fieldLength) { \"\" }\r\n        charArrayF52 = RequestFields.Field52.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld52[j] = \"${charArrayF52[i]}${charArrayF52[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field52/\r\n        //********************************************************\r\n        for (r in fld52.indices) {\r\n            listOfByteArraysF52.add(HexUtil.hexStr2Byte(fld52[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays 52: $listOfByteArraysF52\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF52) {\r\n            lengthOfF52 += byteArray1.size\r\n        }\r\n        //pinblock for online pin\r\n\r\n        val bufferForF52 = ByteBuffer.allocate(lengthOfF52 )\r\n        bufferForF52.apply {\r\n           // put(lengthOfF52.toString().toByteArray())\r\n            for (byteArray1 in listOfByteArraysF52) {\r\n                put(byteArray1)\r\n            }\r\n        }\r\n\r\n        //**************************************************************\r\n        val Fld55lenint=RequestFields.Field55.length/2\r\n        var Fld55lenstr=Fld55lenint.toString()\r\n        Fld55lenstr=\"0\"+Fld55lenstr\r\n\r\n\r\n        fieldLength = Fld55lenstr.length/2\r\n\r\n        Log.d(\"TransData\", \"Fld55lenstr.........: \" + Fld55lenstr)\r\n\r\n        val fld55len  = Array(fieldLength) { \"\" }\r\n\r\n        charArraylenF55 = Fld55lenstr.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld55len[j] = \"${charArraylenF55[i]}${charArraylenF55[i + 1]}\"\r\n            j++\r\n        }\r\n        for (r in fld55len.indices) {\r\n            listOfByteArrayslenF55.add(HexUtil.hexStr2Byte(fld55len[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArrayslenF55\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArrayslenF55) {\r\n            lengthOflenF55 += byteArray1.size\r\n        }\r\n\r\n        //Field 55\r\n\r\n        fieldLength = RequestFields.Field55.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field55}\")\r\n\r\n        val  fld55= Array(fieldLength) { \"\" }\r\n        charArrayF55 = RequestFields.Field55.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld55[j] = \"${charArrayF55[i]}${charArrayF55[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //************************************************ end field52/\r\n        //********************************************************\r\n        for (r in fld55.indices) {\r\n            listOfByteArraysF55.add(HexUtil.hexStr2Byte(fld55[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF55\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF55) {\r\n            lengthOfF55 += byteArray1.size\r\n        }\r\n\r\n\r\n\r\n        //Log.d(TAG, \"len55:\" + Utility.byte2HexStr(len_byte))\r\n\r\n\r\n\r\n        val byteBufferF55nF62 = ByteBuffer.allocate(lengthOflenF55 +\r\n                lengthOfF55+\r\n                lengthOfF62+field11.size)\r\n\r\n        byteBufferF55nF62.apply {\r\n            for (byteArray in listOfByteArrayslenF55) {\r\n                put(byteArray)\r\n            }\r\n            for (byteArray in listOfByteArraysF55) {\r\n                put(byteArray)\r\n            }\r\n            for (byteArray in listOfByteArraysF62) {\r\n                put(byteArray)\r\n            }\r\n            put(field11)\r\n        }\r\n\r\n//tetttttttttttttttt\r\n        val bufferF55nF62 = byteBufferF55nF62.array()\r\n        lateinit var combinedBuffer: ByteBuffer\r\n        val firstBuffer: ByteArray = buffer?.array() ?: \"\".toByteArray()\r\n        Log.d(TAG, \"Sent field2to42....:\" + HexUtil.toHexString(firstBuffer))\r\n        val field52: ByteArray = bufferForF52.array()\r\n        Log.d(TAG, \"Sent field52....:\" + HexUtil.toHexString(field52))\r\n\r\n\r\n        if(txnType.equals(Txntype.reversal)){\r\n            Log.d(TAG, \"reversalllllll..:\" )\r\n            combinedBuffer = ByteBuffer.allocate(firstBuffer.size )\r\n            combinedBuffer.apply {\r\n                put(firstBuffer)\r\n            }\r\n        }else if(txnType.equals(Txntype.purchase)){\r\n            if(isOnlinePin){\r\n                combinedBuffer = ByteBuffer.allocate(firstBuffer.size +field52.size+ bufferF55nF62.size)\r\n                combinedBuffer.apply {\r\n                    put(firstBuffer)\r\n                    put(field52)\r\n                    put(bufferF55nF62)\r\n                }\r\n\r\n\r\n                }\r\n            else{\r\n\r\n                combinedBuffer = ByteBuffer.allocate(firstBuffer.size + bufferF55nF62.size)\r\n                combinedBuffer.apply {\r\n                    put(firstBuffer)\r\n                    put(bufferF55nF62)\r\n                }\r\n\r\n            }\r\n\r\n        }else if(txnType.equals(Txntype.settlement)){\r\n            combinedBuffer = ByteBuffer.allocate(firstBuffer.size )\r\n            combinedBuffer.apply {\r\n                put(firstBuffer)\r\n            }\r\n        }else if(txnType.equals(Txntype.keydownload)){\r\n            combinedBuffer = ByteBuffer.allocate(firstBuffer.size )\r\n            combinedBuffer.apply {\r\n                put(firstBuffer)\r\n            }\r\n        }\r\n\r\n        val result: ByteArray = combinedBuffer?.array() ?: \"\".toByteArray()\r\n        Log.d(TAG, \"Sent packet....:\" + HexUtil.toHexString(result))\r\n\r\n        return result\r\n    }\r\n    fun unpackResponseFields(responseMessage: String) {\r\n        ResponseFields.Header=responseMessage.substring(0,14)\r\n        Log.d(TAG,\"header:\"+ResponseFields.Header)\r\n        ResponseFields.MTI = responseMessage.substring(14, 18)\r\n        //val MTI = hex2Asc(ResponseFields.MTI)\r\n        Log.d(TAG,\"header:\"+ResponseFields.MTI)\r\n\r\n        ResponseFields.primaryBitmap = responseMessage.substring(18, 34)\r\n        println(\"primarybitmap : ${ResponseFields.primaryBitmap}\")\r\n\r\n        val responseBody = responseMessage.substring(34)\r\n        println(\"responsebody : $responseBody\")\r\n\r\n        val binaryBitmap1 = hex2Binary(ResponseFields.primaryBitmap)\r\n        println(\"binarybitmap1 : $binaryBitmap1\")\r\n\r\n        assignValue2ResponseFields(binaryBitmap1, responseBody)\r\n    }\r\n    fun ClearVariables(){\r\n        ResponseFields.Header=\"\"\r\n        ResponseFields.MTI=\"\"\r\n        ResponseFields.primaryBitmap=\"\"\r\n        ResponseFields.Field02=\"\"\r\n        ResponseFields.Field03=\"\"\r\n        ResponseFields.Field04=\"\"\r\n        ResponseFields.Field07=\"\"\r\n        ResponseFields.Field11=\"\"\r\n        ResponseFields.Field12=\"\"\r\n        ResponseFields.Field13=\"\"\r\n        ResponseFields.Field22=\"\"\r\n        ResponseFields.Field24=\"\"\r\n        ResponseFields.Field25=\"\"\r\n        ResponseFields.Field35=\"\"\r\n        ResponseFields.Field37=\"\"\r\n        ResponseFields.Field38=\"\"\r\n        ResponseFields.Field39=\"\"\r\n        ResponseFields.Field41=\"\"\r\n        ResponseFields.Field42=\"\"\r\n        ResponseFields.Field49=\"\"\r\n        ResponseFields.Field52=\"\"\r\n        ResponseFields.Field55=\"\"\r\n        ResponseFields.Field62=\"\"\r\n\r\n        RequestFields. Header=\"\"\r\n        RequestFields. MTI=\"\"\r\n        RequestFields. primaryBitmap=\"\"\r\n        RequestFields. Field02=\"\"\r\n        RequestFields. Field03=\"\"\r\n        RequestFields. Field04=\"\"\r\n        RequestFields. Field07=\"\"\r\n        RequestFields. Field11=\"\"\r\n        RequestFields. Field12=\"\"\r\n        RequestFields. Field13=\"\"\r\n        RequestFields. Field14=\"\"\r\n        RequestFields. Field22=\"\"\r\n        RequestFields. Field24=\"\"\r\n        RequestFields. Field25=\"\"\r\n        RequestFields. Field35=\"\"\r\n        RequestFields. Field37=\"\"\r\n        RequestFields. Field38=\"\"\r\n        RequestFields. Field39= \"\"\r\n        RequestFields. Field41=\"\"\r\n        RequestFields. Field42=\"\"\r\n        RequestFields. Field49=\"\"\r\n        RequestFields. Field52=\"\"\r\n        RequestFields. Field55=\"\"\r\n        RequestFields. Field60=\"\"\r\n        RequestFields. Field62=\"\"\r\n        RequestFields. Field63=\"\"\r\n        RequestFields. endValue4F63=\"\"\r\n\r\n      }\r\n\r\n\r\n\r\n    fun fillGapSequence(data: String, size: Int): String {\r\n        var result = data\r\n        while (result.length != size) {\r\n            result = \"0\" + result\r\n        }\r\n        return result\r\n    }\r\n\r\n    fun assignValue2ResponseFields(binaryBitmap: String, responseBody: String) {\r\n        var n = 0\r\n        var prefix = \"\"\r\n        val charArray = binaryBitmap.toCharArray()\r\n        val strArrayBitmap = Array(charArray.size) { i -> charArray[i].toString() }\r\n\r\n        println(\"binaryBitmap1 : ${strArrayBitmap[1]}\")\r\n\r\n        for (i in 0 until 64) {\r\n            if (strArrayBitmap[i] == \"1\") {\r\n                val j = i + 1\r\n                println(\"bitmap available : $j\")\r\n                when (j) {\r\n\r\n                    3 -> {\r\n                        ResponseFields.Field03 = responseBody.substring(n, n + 6)\r\n                        Log.d(TAG, \"field03: ${ResponseFields.Field03}\")\r\n                        n += 6\r\n                    }\r\n                    4 -> {\r\n                        ResponseFields.Field04 = responseBody.substring(n, n + 12)\r\n                        Log.d(TAG, \"field04: ${ResponseFields.Field04}\")\r\n                        n += 12\r\n                    }\r\n\r\n                    11 -> {\r\n                        ResponseFields.Field11 = responseBody.substring(n, n + 6)\r\n                        Log.d(TAG, \"field11: ${ResponseFields.Field11}\")\r\n                        n += 6\r\n                    }\r\n                    12 -> {\r\n                        ResponseFields.Field12 = responseBody.substring(n, n + 6)\r\n                        Log.d(TAG, \"field12: ${ResponseFields.Field12}\")\r\n                        n += 6\r\n                    }\r\n                    13 -> {\r\n                        ResponseFields.Field13 = responseBody.substring(n, n + 4)\r\n                        Log.d(TAG, \"field13: ${ResponseFields.Field13}\")\r\n                        n += 4\r\n                    }\r\n                    24 -> {\r\n                        ResponseFields.Field24 = responseBody.substring(n, n + 4)\r\n                        Log.d(TAG, \"field24: ${ResponseFields.Field24}\")\r\n                        n += 4\r\n                    }\r\n                    37 -> {\r\n                        ResponseFields.Field37 = hex2Asc(responseBody.substring(n, n + 24))\r\n                        Log.d(TAG, \"field37: ${ResponseFields.Field37}\")\r\n                        n += 24\r\n                    }\r\n                    38 -> {\r\n                        ResponseFields.Field38 = hex2Asc(responseBody.substring(n, n + 12))\r\n                        Log.d(TAG, \"field38: ${ResponseFields.Field38}\")\r\n                        n += 12\r\n                    }\r\n                    39 -> {\r\n                        ResponseFields.Field39 = hex2Asc(responseBody.substring(n, n + 4))\r\n                        Log.d(TAG, \"field39: ${ResponseFields.Field39}\")\r\n                        n += 4\r\n                    }\r\n                    41 -> {\r\n                        ResponseFields.Field41 = hex2Asc(responseBody.substring(n, n + 16))\r\n                        Log.d(TAG, \"field41: ${ResponseFields.Field41}\")\r\n                        n += 16\r\n                    }\r\n                    49 -> {\r\n                        ResponseFields.Field49 = responseBody.substring(n, n + 3)\r\n                        Log.d(TAG, \"field49: ${ResponseFields.Field49}\")\r\n                        n += 3\r\n                    }\r\n                    55 -> {\r\n                        prefix = responseBody.substring(n, n + 4)\r\n                        println(\"prefix: $prefix\")\r\n                        val num = prefix\r\n                        n += 4\r\n                        ResponseFields.Field55 = responseBody.substring(n)\r\n                        Log.d(TAG, \"field55: ${ResponseFields.Field55}\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fun hex2Binary(hexString: String): String {\r\n        val binary = StringBuilder()\r\n        for (i in hexString.indices) {\r\n            val hexChar = hexString[i]\r\n            val binaryString = Integer.toBinaryString(Integer.parseInt(hexChar.toString(), 16))\r\n            binary.append(String.format(\"%4s\", binaryString).replace(' ', '0'))\r\n        }\r\n        return binary.toString()\r\n    }\r\n\r\n    fun hex2Asc(hexString: String): String {\r\n        val output = StringBuilder()\r\n        for (i in hexString.indices step 2) {\r\n            val hex = hexString.substring(i, i + 2)\r\n            output.append(hex.toInt(16).toChar())\r\n        }\r\n        return output.toString()\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt b/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt
--- a/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt	(date 1729516789906)
@@ -203,9 +203,9 @@
         var i = 0
         var fieldLength=0
         //   listOfByteArrays="".toByteArray()
-        var listOfByteArraysHeader = mutableListOf<ByteArray>()
-        var listOfByteArraysMTI = mutableListOf<ByteArray>()
-        var listOfByteArraysBMP = mutableListOf<ByteArray>()
+        val listOfByteArraysHeader = mutableListOf<ByteArray>()
+        val listOfByteArraysMTI = mutableListOf<ByteArray>()
+        val listOfByteArraysBMP = mutableListOf<ByteArray>()
         var lengthOfHeader=0
         var lengthOfMTI=0
 
@@ -214,20 +214,20 @@
         var charArrayHeader="".toCharArray()
         var charArrayMTI="".toCharArray()
         var charArrayBmp="".toCharArray()
-        var listOfByteArrayslenF02 = mutableListOf<ByteArray>()
+        val listOfByteArrayslenF02 = mutableListOf<ByteArray>()
         var lengthOfFlen02=0
         var charArraylenF02="".toCharArray()
 
-        var listOfByteArraysF02 = mutableListOf<ByteArray>()
+        val listOfByteArraysF02 = mutableListOf<ByteArray>()
         var lengthOfF02=0
         var charArrayF02="".toCharArray()
         //   ***************************************************************
-        var listOfByteArraysF03 = mutableListOf<ByteArray>()
+        val listOfByteArraysF03 = mutableListOf<ByteArray>()
         var lengthOfF03=0
         var charArrayF03="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF04 = mutableListOf<ByteArray>()
+        val listOfByteArraysF04 = mutableListOf<ByteArray>()
         var lengthOfF04=0
         var charArrayF04="".toCharArray()
         //   ***************************************************************
@@ -237,58 +237,58 @@
         var charArrayF11="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF12 = mutableListOf<ByteArray>()
+        val listOfByteArraysF12 = mutableListOf<ByteArray>()
         var lengthOfF12=0
         var charArrayF12="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF13 = mutableListOf<ByteArray>()
+        val listOfByteArraysF13 = mutableListOf<ByteArray>()
         var lengthOfF13=0
         var charArrayF13="".toCharArray()
         //   ***************************************************************
 
         //   ***************************************************************
-        var listOfByteArraysF14 = mutableListOf<ByteArray>()
+        val listOfByteArraysF14 = mutableListOf<ByteArray>()
         var lengthOfF14=0
         var charArrayF14="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF22 = mutableListOf<ByteArray>()
+        val listOfByteArraysF22 = mutableListOf<ByteArray>()
         var lengthOfF22=0
         var charArrayF22="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF24 = mutableListOf<ByteArray>()
+        val listOfByteArraysF24 = mutableListOf<ByteArray>()
         var lengthOfF24=0
         var charArrayF24="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF25 = mutableListOf<ByteArray>()
+        val listOfByteArraysF25 = mutableListOf<ByteArray>()
         var lengthOfF25=0
         var charArrayF25="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF35 = mutableListOf<ByteArray>()
+        val listOfByteArraysF35 = mutableListOf<ByteArray>()
         var lengthOfF35=0
         var charArrayF35="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF37 = mutableListOf<ByteArray>()
+        val listOfByteArraysF37 = mutableListOf<ByteArray>()
         var lengthOfF37=0
         var charArrayF37="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF38 = mutableListOf<ByteArray>()
+        val listOfByteArraysF38 = mutableListOf<ByteArray>()
         var lengthOfF38=0
         var charArrayF38="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF39 = mutableListOf<ByteArray>()
+        val listOfByteArraysF39 = mutableListOf<ByteArray>()
         var lengthOfF39=0
         var charArrayF39="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArrayslenF35 = mutableListOf<ByteArray>()
+        val listOfByteArrayslenF35 = mutableListOf<ByteArray>()
         var lengthOflenF35=0
         var charArraylenF35="".toCharArray()
         //   ***************************************************************
@@ -298,32 +298,32 @@
         var charArraylenF52="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF52 = mutableListOf<ByteArray>()
+        val listOfByteArraysF52 = mutableListOf<ByteArray>()
         var lengthOfF52=0
         var charArrayF52="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArrayslenF55 = mutableListOf<ByteArray>()
+        val listOfByteArrayslenF55 = mutableListOf<ByteArray>()
         var lengthOflenF55=0
         var charArraylenF55="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF55 = mutableListOf<ByteArray>()
+        val listOfByteArraysF55 = mutableListOf<ByteArray>()
         var lengthOfF55=0
         var charArrayF55="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF60 = mutableListOf<ByteArray>()
+        val listOfByteArraysF60 = mutableListOf<ByteArray>()
         var lengthOfF60=0
         var charArrayF60="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF62 = mutableListOf<ByteArray>()
+        val listOfByteArraysF62 = mutableListOf<ByteArray>()
         var lengthOfF62=0
         var charArrayF62="".toCharArray()
         //   ***************************************************************
         //   ***************************************************************
-        var listOfByteArraysF63 = mutableListOf<ByteArray>()
+        val listOfByteArraysF63 = mutableListOf<ByteArray>()
         var lengthOfF63=0
         var charArrayF63="".toCharArray()
         //   ***************************************************************
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id(\"com.android.application\")\r\n    id(\"org.jetbrains.kotlin.android\")\r\n    kotlin(\"kapt\")\r\n    id(\"dagger.hilt.android.plugin\")\r\n    id(\"com.google.gms.google-services\")\r\n    id(\"com.google.firebase.crashlytics\")\r\n}\r\n//test commit\r\nandroid {\r\n    namespace = \"net.geidea.payment\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"net.geidea.payment\"\r\n        minSdk = 30\r\n        targetSdk = 33\r\n        versionCode = 2\r\n        versionName = \"1.1\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_17\r\n        targetCompatibility = JavaVersion.VERSION_17\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"17\"\r\n    }\r\n\r\n    buildFeatures {\r\n        dataBinding = true\r\n        viewBinding = true\r\n        buildConfig = true\r\n        aidl = true\r\n    }\r\n    dependenciesInfo {\r\n        includeInApk = true\r\n        includeInBundle = true\r\n    }\r\n    buildToolsVersion = \"35.0.0\"\r\n}\r\n\r\ndependencies {\r\n    implementation(\"androidx.activity:activity:1.9.1\")\r\n    val lifecycleVersion = \"2.5.1\"\r\n    implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\", \"*.aar\"))))\r\n    implementation(\"androidx.core:core-ktx:1.13.1\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"com.google.android.material:material:1.8.0\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.2.1\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.6.1\")\r\n\r\n    //Coroutines\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4\")\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4\")\r\n\r\n    implementation(\"androidx.datastore:datastore-preferences:1.1.1\")\r\n    implementation(\"androidx.datastore:datastore-core:1.1.1\")\r\n\r\n    implementation(\"com.google.dagger:hilt-android:2.44\")\r\n    kapt(\"com.google.dagger:hilt-compiler:2.44\")\r\n\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion\")\r\n\r\n    implementation(\"androidx.core:core-ktx:1.10.1\")\r\n    implementation(\"androidx.fragment:fragment-ktx:1.5.5\")\r\n\r\n    // Import the BoM for the Firebase platform\r\n    implementation(platform(\"com.google.firebase:firebase-bom:33.1.2\"))\r\n    implementation(\"com.google.firebase:firebase-crashlytics\")\r\n    implementation(\"com.google.firebase:firebase-analytics\")\r\n    implementation(\"com.google.firebase:firebase-database:21.0.0\")\r\n\r\n    //..........................Added by Amlakie.....................\r\n    // Jetpack Compose UI Dependencies\r\n    implementation (\"androidx.compose.ui:ui:1.5.0\")                   // Compose UI\r\n    implementation (\"androidx.compose.material:material:1.5.0\")       // Material Design\r\n    implementation (\"androidx.compose.ui:ui-tooling-preview:1.5.0\")   // Preview support\r\n    implementation (\"androidx.activity:activity-compose:1.7.2\")       // Compose support for Activity\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/app/build.gradle.kts	(date 1729346182152)
@@ -14,7 +14,7 @@
     defaultConfig {
         applicationId = "net.geidea.payment"
         minSdk = 30
-        targetSdk = 33
+        targetSdk = 34
         versionCode = 2
         versionName = "1.1"
 
Index: app/src/main/java/net/geidea/payment/ActivityCollector.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.geidea.payment\r\n\r\nimport android.app.Activity\r\nimport android.util.Log\r\n\r\nclass ActivityCollector {\r\n     companion object ActivityCollector {\r\n        private val activities = mutableListOf<Activity>()\r\n//test commit\r\n        fun addActivity(activity: Activity) {\r\n            activities.add(activity)\r\n        }\r\n\r\n        fun removeActivity(activity: Activity) {\r\n            activities.remove(activity)\r\n        }\r\n\r\n        fun finishAll() {\r\n            for (activity in activities) {\r\n                if (!activity.isFinishing) {\r\n                    activity.finish()\r\n                }\r\n            }\r\n            activities.clear()\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/geidea/payment/ActivityCollector.kt b/app/src/main/java/net/geidea/payment/ActivityCollector.kt
--- a/app/src/main/java/net/geidea/payment/ActivityCollector.kt	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/app/src/main/java/net/geidea/payment/ActivityCollector.kt	(date 1729496416467)
@@ -1,7 +1,7 @@
 package net.geidea.payment
 
 import android.app.Activity
-import android.util.Log
+//import android.util.Log
 
 class ActivityCollector {
      companion object ActivityCollector {
Index: app/src/main/java/net/geidea/payment/users/supervisor/SupervisorMainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.geidea.payment.users.supervisor\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.google.android.material.navigation.NavigationView\r\nimport net.geidea.payment.MainMenuActivity\r\nimport net.geidea.payment.R\r\nimport net.geidea.payment.customdialog.DialogLogoutConfirm\r\nimport net.geidea.payment.databinding.ActivityAdminManageSupportBinding\r\nimport net.geidea.payment.databinding.ActivitySupervisorMainBinding\r\nimport net.geidea.payment.databinding.NavHeaderBinding\r\nimport net.geidea.payment.help.HelpMainActivity\r\nimport net.geidea.payment.users.admin.AddSupportActivity\r\nimport net.geidea.payment.users.admin.AdminManageSupportActivity\r\n\r\nclass SupervisorMainActivity : AppCompatActivity() {\r\n\r\n    // Declare the binding variable\r\n    private lateinit var binding: ActivitySupervisorMainBinding\r\n    private val TAG = \"SupervisorManageCashierActivity\" // For logging purposes\r\n    private lateinit var actionBarDrawerToggle: ActionBarDrawerToggle // For managing the drawer layout\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        Log.d(\"TAG\", TAG)\r\n        // Initialize view binding\r\n        // Inflate the layout using DataBindingUtil\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_supervisor_main)\r\n\r\n        // Setup ActionBarDrawerToggle for navigation drawer\r\n        actionBarDrawerToggle = ActionBarDrawerToggle(\r\n            this, binding.supervisorDrawerLayout, R.string.open, R.string.close\r\n        )\r\n        binding.supervisorDrawerLayout.addDrawerListener(actionBarDrawerToggle)\r\n        actionBarDrawerToggle.syncState()\r\n\r\n        // Set up toolbar navigation icon click listener\r\n        // Set up toolbar navigation icon click listener\r\n        binding.toolbar.navIcon?.setOnClickListener {\r\n            binding.supervisorDrawerLayout.openDrawer(GravityCompat.START)\r\n        }\r\n\r\n        // Retrieve user credentials from SharedPreferences\r\n        val sharedPreferences = getSharedPreferences(\"UserPrefs\", Context.MODE_PRIVATE)\r\n        val username = sharedPreferences.getString(\"username\", \"\") ?: \"\"\r\n        val userType = sharedPreferences.getString(\"userType\", \"\") ?: \"\"\r\n\r\n        navItemClickListener()\r\n        setUpCardViewListeners()\r\n\r\n        // Update the navigation header\r\n        updateNavHeader(\"Username: \"+ username +\"\", \"User Role: \"+userType+\"\")\r\n    }\r\n\r\n    private fun navItemClickListener() {\r\n        // Set up navigation drawer interactions using binding\r\n        binding.supervisorNavigationView.setNavigationItemSelectedListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.nav_manage_cashier -> {\r\n                    startActivity(Intent(this, SupervisorManageCashierActivity::class.java))\r\n                }\r\n                R.id.nav_home -> {\r\n                    // Handle navigation to Config Terminal\r\n                }\r\n                R.id.nav_terminal_info -> {\r\n                    // Handle navigation to Terminal Info\r\n                }\r\n                R.id.nav_settings -> {\r\n                    // Handle navigation to Settings\r\n                }\r\n                R.id.nav_help -> {\r\n                    startActivity(Intent(this, HelpMainActivity::class.java))\r\n                }\r\n                R.id.nav_logout -> {\r\n                    val exitDialog = DialogLogoutConfirm(\r\n                        this,\r\n                        title = \"Logout\",\r\n                        message = \"Are you sure you want to logout?\",\r\n                        cancelBtn = \"Cancel\",\r\n                        logoutBtn = \"Logout\"\r\n                    ) {\r\n                        startActivity(Intent(this, MainMenuActivity::class.java))\r\n                        finish() // Close the app\r\n                    }\r\n                    exitDialog.show()\r\n                }\r\n            }\r\n            binding.supervisorDrawerLayout.closeDrawer(GravityCompat.START)\r\n            true\r\n        }\r\n    }\r\n\r\n    private fun setUpCardViewListeners() {\r\n        // Set up onClickListeners for CardViews using binding\r\n        binding.supervisorManageCashier.setOnClickListener {\r\n            val intent = Intent(this@SupervisorMainActivity, SupervisorManageCashierActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        binding.supervisorConfigTerminal.setOnClickListener {\r\n            // Handle Config Terminal click\r\n        }\r\n\r\n        binding.supervisorTerminalInfo.setOnClickListener {\r\n            // Handle Terminal Info click\r\n        }\r\n\r\n        binding.supervisorSettings.setOnClickListener {\r\n            // Handle Settings click\r\n        }\r\n\r\n        binding.supervisorSummaryReport.setOnClickListener {\r\n            // Handle Summary Report click\r\n        }\r\n\r\n        binding.supervisorReprint.setOnClickListener {\r\n            // Handle Reprint click\r\n        }\r\n    }\r\n\r\n    // Method to update the Navigation Header Texts\r\n    private fun updateNavHeader(username: String, userrole: String) {\r\n        // Get the navigation view binding for the header\r\n        val headerBinding = NavHeaderBinding.bind(binding.supervisorNavigationView.getHeaderView(0))\r\n\r\n        // Update the username and userrole\r\n        headerBinding.username.text = username\r\n        headerBinding.userrole.text = userrole\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/geidea/payment/users/supervisor/SupervisorMainActivity.kt b/app/src/main/java/net/geidea/payment/users/supervisor/SupervisorMainActivity.kt
--- a/app/src/main/java/net/geidea/payment/users/supervisor/SupervisorMainActivity.kt	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/app/src/main/java/net/geidea/payment/users/supervisor/SupervisorMainActivity.kt	(date 1729518634892)
@@ -56,7 +56,7 @@
         setUpCardViewListeners()
 
         // Update the navigation header
-        updateNavHeader("Username: "+ username +"", "User Role: "+userType+"")
+        updateNavHeader("Username: $username", "User Role: $userType")
     }
 
     private fun navItemClickListener() {
Index: .gradle/config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Sat Oct 19 15:37:47 EAT 2024\r\njava.home=C\\:\\\\Program Files\\\\Android\\\\Android Studio2\\\\jbr\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.gradle/config.properties b/.gradle/config.properties
--- a/.gradle/config.properties	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/.gradle/config.properties	(date 1729493301200)
@@ -1,2 +1,3 @@
-#Sat Oct 19 15:37:47 EAT 2024
+#Mon Oct 21 09:48:21 EAT 2024
+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000=
 java.home=C\:\\Program Files\\Android\\Android Studio2\\jbr
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5d5854ba-836b-4755-bd41-40d324b92220\" name=\"Changes\" comment=\"dialog aded\">\r\n      <change beforePath=\"$PROJECT_DIR$/app/build.gradle.kts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/build.gradle.kts\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[DeviceId(pluginId=PhysicalDevice, isTemplate=false, identifier=serial=P01A224022100832)]\" />\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Wonde497&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Amlakie-T/Nib-Bank-Geidea-POS&quot;,\r\n    &quot;accountId&quot;: &quot;1521b79b-4f57-48b3-9997-468c62ca2fac&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2neh8ECS5DXNHMSSCM8zdoGS5S6\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\r\n    \"RunOnceActivity.readMode.enableVisualFormatting\": \"true\",\r\n    \"cf.first.check.clang-format\": \"false\",\r\n    \"cidr.known.project.marker\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/HP/StudioProjects/Nib-Bank-Geidea-POS\",\r\n    \"settings.editor.selected.configurable\": \"AndroidSdkUpdater\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"kotlin-gradle-user-dirs\": [\r\n      \"C:\\\\Users\\\\HP\\\\.gradle\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"app\" type=\"AndroidRunConfigurationType\" factoryName=\"Android App\" activateToolWindowBeforeRun=\"false\">\r\n      <module name=\"Payment.app.main\" />\r\n      <option name=\"DEPLOY\" value=\"true\" />\r\n      <option name=\"DEPLOY_APK_FROM_BUNDLE\" value=\"false\" />\r\n      <option name=\"DEPLOY_AS_INSTANT\" value=\"false\" />\r\n      <option name=\"ARTIFACT_NAME\" value=\"\" />\r\n      <option name=\"PM_INSTALL_OPTIONS\" value=\"\" />\r\n      <option name=\"ALL_USERS\" value=\"true\" />\r\n      <option name=\"ALWAYS_INSTALL_WITH_PM\" value=\"false\" />\r\n      <option name=\"CLEAR_APP_STORAGE\" value=\"false\" />\r\n      <option name=\"DYNAMIC_FEATURES_DISABLED_LIST\" value=\"\" />\r\n      <option name=\"ACTIVITY_EXTRA_FLAGS\" value=\"\" />\r\n      <option name=\"MODE\" value=\"default_activity\" />\r\n      <option name=\"CLEAR_LOGCAT\" value=\"false\" />\r\n      <option name=\"SHOW_LOGCAT_AUTOMATICALLY\" value=\"false\" />\r\n      <option name=\"TARGET_SELECTION_MODE\" value=\"DEVICE_AND_SNAPSHOT_COMBO_BOX\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_CONFIGURATION_ID\" value=\"-1\" />\r\n      <option name=\"SELECTED_CLOUD_MATRIX_PROJECT_ID\" value=\"\" />\r\n      <option name=\"DEBUGGER_TYPE\" value=\"Auto\" />\r\n      <Auto>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Auto>\r\n      <Hybrid>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Hybrid>\r\n      <Java>\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Java>\r\n      <Native>\r\n        <option name=\"USE_JAVA_AWARE_DEBUGGER\" value=\"false\" />\r\n        <option name=\"SHOW_STATIC_VARS\" value=\"true\" />\r\n        <option name=\"WORKING_DIR\" value=\"\" />\r\n        <option name=\"TARGET_LOGGING_CHANNELS\" value=\"lldb process:gdb-remote packets\" />\r\n        <option name=\"SHOW_OPTIMIZED_WARNING\" value=\"true\" />\r\n        <option name=\"ATTACH_ON_WAIT_FOR_DEBUGGER\" value=\"false\" />\r\n        <option name=\"DEBUG_SANDBOX_SDK\" value=\"false\" />\r\n      </Native>\r\n      <Profilers>\r\n        <option name=\"ADVANCED_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"STARTUP_CPU_PROFILING_CONFIGURATION_NAME\" value=\"Java/Kotlin Method Sample (legacy)\" />\r\n        <option name=\"STARTUP_NATIVE_MEMORY_PROFILING_ENABLED\" value=\"false\" />\r\n        <option name=\"NATIVE_MEMORY_SAMPLE_RATE_BYTES\" value=\"2048\" />\r\n      </Profilers>\r\n      <option name=\"DEEP_LINK\" value=\"\" />\r\n      <option name=\"ACTIVITY_CLASS\" value=\"\" />\r\n      <option name=\"SEARCH_ACTIVITY_IN_GLOBAL_SCOPE\" value=\"false\" />\r\n      <option name=\"SKIP_ACTIVITY_VALIDATION\" value=\"false\" />\r\n      <method v=\"2\">\r\n        <option name=\"Android.Gradle.BeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5d5854ba-836b-4755-bd41-40d324b92220\" name=\"Changes\" comment=\"\" />\r\n      <created>1729339288243</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729339288243</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"dialog aded\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729343586019</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729343586019</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"dialog aded\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"dialog aded\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 97e60267080ab2e74fb4a174f9ea33fdd4b939bc)
+++ b/.idea/workspace.xml	(date 1729579054139)
@@ -1,11 +1,28 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AndroidLayouts">
+    <shared>
+      <config />
+    </shared>
+  </component>
   <component name="AutoImportSettings">
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5d5854ba-836b-4755-bd41-40d324b92220" name="Changes" comment="dialog aded">
+    <list default="true" id="5d5854ba-836b-4755-bd41-40d324b92220" name="Changes" comment="test colmmit">
+      <change beforePath="$PROJECT_DIR$/.gradle/8.7/checksums/checksums.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.7/checksums/checksums.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.7/executionHistory/executionHistory.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.7/executionHistory/executionHistory.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.7/fileHashes/fileHashes.bin" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.7/fileHashes/fileHashes.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/8.7/fileHashes/fileHashes.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/8.7/fileHashes/fileHashes.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/buildOutputCleanup/buildOutputCleanup.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gradle/config.properties" beforeDir="false" afterPath="$PROJECT_DIR$/.gradle/config.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/app/build.gradle.kts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/ActivityCollector.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/ActivityCollector.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/MainMenuActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/MainMenuActivity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/SplashActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/SplashActivity.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/users/supervisor/SupervisorMainActivity.kt" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/java/net/geidea/payment/users/supervisor/SupervisorMainActivity.kt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -15,12 +32,50 @@
   <component name="ClangdSettings">
     <option name="formatViaClangd" value="false" />
   </component>
-  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[DeviceId(pluginId=PhysicalDevice, isTemplate=false, identifier=serial=P01A224022100832)]" />
+  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[DeviceId(pluginId=PhysicalDevice, isTemplate=false, identifier=serial=P12230727001583)]" />
   <component name="ExternalProjectsData">
     <projectState path="$PROJECT_DIR$">
       <ProjectState />
     </projectState>
   </component>
+  <component name="ExternalProjectsManager">
+    <system id="GRADLE">
+      <state>
+        <task path="$PROJECT_DIR$/app">
+          <activation />
+        </task>
+        <projects_view>
+          <tree_state>
+            <expand>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="Payment" type="f1a62948:ProjectNode" />
+              </path>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="Payment" type="f1a62948:ProjectNode" />
+                <item name="app" type="2d1252cf:ModuleNode" />
+              </path>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="Payment" type="f1a62948:ProjectNode" />
+                <item name="app" type="2d1252cf:ModuleNode" />
+                <item name="Tasks" type="e4a08cd1:TasksNode" />
+              </path>
+              <path>
+                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
+                <item name="Payment" type="f1a62948:ProjectNode" />
+                <item name="app" type="2d1252cf:ModuleNode" />
+                <item name="Tasks" type="e4a08cd1:TasksNode" />
+                <item name="other" type="c8890929:TasksNode$1" />
+              </path>
+            </expand>
+            <select />
+          </tree_state>
+        </projects_view>
+      </state>
+    </system>
+  </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
@@ -50,6 +105,7 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
+    "Android App.app.executor": "Run",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "RunOnceActivity.cidr.known.project.marker": "true",
     "RunOnceActivity.readMode.enableVisualFormatting": "true",
@@ -58,6 +114,9 @@
     "git-widget-placeholder": "main",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "C:/Users/HP/StudioProjects/Nib-Bank-Geidea-POS",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.17",
+    "project.structure.side.proportion": "0.2",
     "settings.editor.selected.configurable": "AndroidSdkUpdater"
   },
   "keyToStringList": {
@@ -151,11 +210,39 @@
       <option name="project" value="LOCAL" />
       <updated>1729343586019</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="test colmmit">
+      <option name="closed" value="true" />
+      <created>1729345106862</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1729345106862</updated>
+    </task>
+    <task id="LOCAL-00003" summary="test colmmit">
+      <option name="closed" value="true" />
+      <created>1729345165045</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1729345165045</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="dialog aded" />
-    <option name="LAST_COMMIT_MESSAGE" value="dialog aded" />
+    <MESSAGE value="test colmmit" />
+    <option name="LAST_COMMIT_MESSAGE" value="test colmmit" />
   </component>
 </project>
\ No newline at end of file
