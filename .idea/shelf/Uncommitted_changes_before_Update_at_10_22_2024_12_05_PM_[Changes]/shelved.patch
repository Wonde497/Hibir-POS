Index: app/src/main/java/net/geidea/payment/transaction/model/TransData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package net.geidea.payment.transaction.model\r\n\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.content.SharedPreferences.Editor\r\nimport android.icu.text.SimpleDateFormat\r\nimport android.util.Log\r\nimport androidx.annotation.Keep\r\nimport net.geidea.payment.DBHandler\r\nimport net.geidea.payment.Txntype\r\nimport net.geidea.payment.report.Report\r\nimport net.geidea.payment.tlv.HexUtil\r\nimport java.nio.ByteBuffer\r\nimport java.util.Date\r\nimport java.util.Locale\r\n\r\n@Keep\r\nclass TransData(private val context:Context) {\r\n    val sharedPreferences=context.getSharedPreferences(\"SHARED_DATA\",Context.MODE_PRIVATE)\r\n    private lateinit var editor: SharedPreferences.Editor\r\n\r\n\r\n    var txnType=sharedPreferences.getString(\"TXN_TYPE\",\"\")\r\n\r\n    var entryMode:String = \"\"\r\n    var cardLabelNameEng = \"\"\r\n    var isOnlinePin=false\r\n    var amount:Long = 0L\r\n    var pinBlock = \"\"\r\n    var transactionReqDateTime = \"\"\r\n    var aid = \"\"\r\n    var rrn = \"\"\r\n    var stan = \"\"\r\n    var transactionStatus = false\r\n    var transactionType = \"\"\r\n    var genACResult = \"\"\r\n    var pan = \"\"\r\n    var applicationCryptogram = \"\"\r\n    var cardExpiryDate = \"\"\r\n    var verificationMethod = 0\r\n    val TAG=\"TransData\"\r\n    var track2=\"\"\r\n\r\n    override fun toString(): String {\r\n        return \"TransData(\" +\r\n                \"entryMode='$entryMode', \" +\r\n                \"cardLabelNameEng='$cardLabelNameEng', \" +\r\n                \"isOnlinePin=$isOnlinePin, \" +\r\n                \"amount=$amount, \" +\r\n                \"pinBlock='$pinBlock', \" +\r\n                \"transactionReqDateTime='$transactionReqDateTime', \" +\r\n                \"aid='$aid', \" +\r\n                \"rrn='$rrn', \" +\r\n                \"stan='$stan', \" +\r\n                \"transactionStatus=$transactionStatus, \" +\r\n                \"transactionType='$transactionType', \" +\r\n                \"genACResult='$genACResult', \" +\r\n                \"pan='$pan', \" +\r\n                \"applicationCryptogram='$applicationCryptogram', \" +\r\n                \"cardExpiryDate='$cardExpiryDate', \" +\r\n                \"verificationMethod=$verificationMethod\" +\r\n                \")\"\r\n    }\r\n    class RequestFields{\r\n        companion object{\r\n            var Header=\"\"\r\n            var MTI=\"\"\r\n            var primaryBitmap=\"\"\r\n            var Field02=\"\"\r\n            var Field03=\"\"\r\n            var Field04=\"\"\r\n            var Field07=\"\"\r\n            var Field11=\"\"\r\n            var Field12=\"\"\r\n            var Field13=\"\"\r\n            var Field14=\"\"\r\n            var Field22=\"0051\"\r\n            var Field24=\"0001\"\r\n            var Field25=\"00\"\r\n            var Field35=\"\"\r\n            var Field37=\"\"\r\n            var Field38=\"\"\r\n            var Field39= \"\"\r\n            var Field41=\"\"\r\n            var Field42=\"\"\r\n            var Field49=\"230\"\r\n            var Field52=\"\"\r\n            var Field55=\"\"\r\n            var Field60=\"0012\"\r\n            var Field62=\"0006\"\r\n            var Field63=\"\"\r\n            var endValue4F63=\"\"\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    class ResponseFields{\r\n        companion object{\r\n            var Header=\"\"\r\n            var MTI=\"\"\r\n            var primaryBitmap=\"\"\r\n            var Field02=\"\"\r\n            var Field03=\"\"\r\n            var Field04=\"\"\r\n            var Field07=\"\"\r\n            var Field11=\"\"\r\n            var Field12=\"\"\r\n            var Field13=\"\"\r\n            var Field22=\"\"\r\n            var Field24=\"200\"\r\n            var Field25=\"00\"\r\n            var Field35=\"\"\r\n            var Field37=\"\"\r\n            var Field38=\"\"\r\n            var Field39=\"\"\r\n            var Field41=\"\"\r\n            var Field42=\"\"\r\n            var Field49=\"\"\r\n            var Field52=\"\"\r\n            var Field55=\"\"\r\n            var Field62=\"\"\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    fun assignValue2Fields(){\r\n\r\n        var txnType=sharedPreferences.getString(\"TXN_TYPE\",\"\")\r\n        if(!txnType.equals(Txntype.keydownload) && !txnType.equals(Txntype.settlement) && !txnType.equals(Txntype.reversal)) {\r\n            Log.d(TAG, \"txntype2:\" + txnType)\r\n\r\n            RequestFields.Field11 = stan\r\n            Log.d(TAG, \"stankd:\" + RequestFields.Field11)\r\n        }\r\n        //ClearVariables()\r\n      //  txnType=sharedPreferences.getString(\"TXN_TYPE\",\"\")\r\n        Log.d(TAG,\"txn type\"+txnType)\r\n        Log.d(TAG,\"entry mode\"+entryMode)\r\n        if(txnType.equals(Txntype.purchase)){\r\n            if(entryMode.equals(EntryMode.CONTACTLESS)){\r\n                Log.d(TAG,\"txn type\"+txnType)\r\n                RequestFields.Field22=\"0070\"\r\n            }else  RequestFields.Field22=\"0051\"\r\n\r\n\r\n            RequestFields. Header=\"30606020153535\"\r\n            RequestFields.MTI=\"0200\"\r\n            RequestFields.Field25=\"00\"\r\n            RequestFields.Field62=\"0006\"\r\n\r\n            if(isOnlinePin){\r\n                RequestFields.primaryBitmap=\"7024058020C01204\"\r\n\r\n            }else RequestFields.primaryBitmap=\"7024058020C00204\"\r\n\r\n            RequestFields.Field03=\"000000\"\r\n//bitmap for online pin\r\n        } else if(txnType.equals(Txntype.reversal)){\r\n            RequestFields. Header=\"30606020153535\"\r\n            RequestFields.MTI=\"0200\"\r\n            RequestFields.primaryBitmap=\"703C05802EC00014\"\r\n            RequestFields.Field03=\"020000\"\r\n            if(entryMode.equals(EntryMode.CONTACTLESS)){\r\n                RequestFields.Field22=\"0070\"\r\n            }\r\n        }\r\n\r\n\r\n\r\n        RequestFields.Field02=pan\r\n\r\n        // RequestFields.Field07= SimpleDateFormat(\"MMddhhmmss\", Locale.getDefault()).format(Date())\r\n        Log.d(TAG, \"trantype:\" + txnType)\r\n\r\n        // RequestFields.Field12=SimpleDateFormat(\"yyMMddhhmmss\", Locale.getDefault()).format( Date())\r\n        if(!txnType.equals(Txntype.keydownload) ){\r\n                RequestFields.Field14 = cardExpiryDate.substring(0, 4)//+\"01\"\r\n            }\r\n        Log.d(TAG,\"Field14:\"+RequestFields.Field14)\r\n\r\n         if(RequestFields.Field35.endsWith(\"F\")){\r\n            RequestFields.Field35=RequestFields.Field35.substringBefore(\"F\")\r\n\r\n          }\r\n\r\n        Log.d(TAG,\"Field35:\"+RequestFields.Field35)\r\n        val dbHandler=DBHandler(context)\r\n        RequestFields.Field41=dbHandler.getTID()//\"TID12345\"\r\n        Log.d(TAG,\"terminalID:\"+RequestFields.Field41)\r\n        RequestFields.Field42=dbHandler.getMID()//\"MID123456789012\"\r\n        Log.d(TAG,\"merchantID:\"+RequestFields.Field42)\r\n        //RequestFields.Field52\r\n        Log.d(TAG,\"Field52:\"+RequestFields.Field52)\r\n\r\n    }\r\n    fun packRequestFields():ByteArray {\r\n        //ClearVariables()\r\n        var j = 0\r\n        var i = 0\r\n        var fieldLength=0\r\n        //   listOfByteArrays=\"\".toByteArray()\r\n        var listOfByteArraysHeader = mutableListOf<ByteArray>()\r\n        var listOfByteArraysMTI = mutableListOf<ByteArray>()\r\n        var listOfByteArraysBMP = mutableListOf<ByteArray>()\r\n        var lengthOfHeader=0\r\n        var lengthOfMTI=0\r\n\r\n        var lengthOfBitmap = 0\r\n\r\n        var charArrayHeader=\"\".toCharArray()\r\n        var charArrayMTI=\"\".toCharArray()\r\n        var charArrayBmp=\"\".toCharArray()\r\n        var listOfByteArrayslenF02 = mutableListOf<ByteArray>()\r\n        var lengthOfFlen02=0\r\n        var charArraylenF02=\"\".toCharArray()\r\n\r\n        var listOfByteArraysF02 = mutableListOf<ByteArray>()\r\n        var lengthOfF02=0\r\n        var charArrayF02=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        var listOfByteArraysF03 = mutableListOf<ByteArray>()\r\n        var lengthOfF03=0\r\n        var charArrayF03=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF04 = mutableListOf<ByteArray>()\r\n        var lengthOfF04=0\r\n        var charArrayF04=\"\".toCharArray()\r\n        //   ***************************************************************\r\n//   ***************************************************************\r\n        var listOfByteArraysF11 = mutableListOf<ByteArray>()\r\n        var lengthOfF11=0\r\n        var charArrayF11=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF12 = mutableListOf<ByteArray>()\r\n        var lengthOfF12=0\r\n        var charArrayF12=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF13 = mutableListOf<ByteArray>()\r\n        var lengthOfF13=0\r\n        var charArrayF13=\"\".toCharArray()\r\n        //   ***************************************************************\r\n\r\n        //   ***************************************************************\r\n        var listOfByteArraysF14 = mutableListOf<ByteArray>()\r\n        var lengthOfF14=0\r\n        var charArrayF14=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF22 = mutableListOf<ByteArray>()\r\n        var lengthOfF22=0\r\n        var charArrayF22=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF24 = mutableListOf<ByteArray>()\r\n        var lengthOfF24=0\r\n        var charArrayF24=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF25 = mutableListOf<ByteArray>()\r\n        var lengthOfF25=0\r\n        var charArrayF25=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF35 = mutableListOf<ByteArray>()\r\n        var lengthOfF35=0\r\n        var charArrayF35=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF37 = mutableListOf<ByteArray>()\r\n        var lengthOfF37=0\r\n        var charArrayF37=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF38 = mutableListOf<ByteArray>()\r\n        var lengthOfF38=0\r\n        var charArrayF38=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF39 = mutableListOf<ByteArray>()\r\n        var lengthOfF39=0\r\n        var charArrayF39=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArrayslenF35 = mutableListOf<ByteArray>()\r\n        var lengthOflenF35=0\r\n        var charArraylenF35=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArrayslenF52 = mutableListOf<ByteArray>()\r\n        var lengthOflenF52=0\r\n        var charArraylenF52=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF52 = mutableListOf<ByteArray>()\r\n        var lengthOfF52=0\r\n        var charArrayF52=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArrayslenF55 = mutableListOf<ByteArray>()\r\n        var lengthOflenF55=0\r\n        var charArraylenF55=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF55 = mutableListOf<ByteArray>()\r\n        var lengthOfF55=0\r\n        var charArrayF55=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF60 = mutableListOf<ByteArray>()\r\n        var lengthOfF60=0\r\n        var charArrayF60=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF62 = mutableListOf<ByteArray>()\r\n        var lengthOfF62=0\r\n        var charArrayF62=\"\".toCharArray()\r\n        //   ***************************************************************\r\n        //   ***************************************************************\r\n        var listOfByteArraysF63 = mutableListOf<ByteArray>()\r\n        var lengthOfF63=0\r\n        var charArrayF63=\"\".toCharArray()\r\n        //   ***************************************************************\r\n\r\n\r\n        Log.d(\"tag\",\"packet12 \"+RequestFields.Field11)\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Header.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Header}\")\r\n\r\n        val  header= Array(fieldLength) { \"\" }\r\n        charArrayHeader = RequestFields.Header.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            header[j] = \"${charArrayHeader[i]}${charArrayHeader[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end header/\r\n        //**************************************************************\r\n\r\n        fieldLength = RequestFields.MTI.length / 2\r\n        Log.d(\"TransData\", \"mti.........: ${RequestFields.MTI}\")\r\n\r\n        val  mti= Array(fieldLength) { \"\" }\r\n\r\n        charArrayMTI = RequestFields.MTI.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            mti[j] = \"${charArrayMTI[i]}${charArrayMTI[i + 1]}\"\r\n            j++\r\n        }\r\n        //************************************************ end mti/\r\n        val bitmaplength = RequestFields.primaryBitmap.length / 2\r\n        Log.d(\"TransData\", \"bitmaptry.........: ${RequestFields.primaryBitmap}\")\r\n\r\n        val primarybitmap = Array(bitmaplength) { \"\" }\r\n        charArrayBmp = RequestFields.primaryBitmap.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until bitmaplength * 2 step 2) {\r\n            primarybitmap[j] = \"${charArrayBmp[i]}${charArrayBmp[i + 1]}\"\r\n            j++\r\n        }\r\n        //************************************************ end bmp/\r\n\r\n//**************************************************************\r\n\r\n\r\n\r\n        //**************************************************************\r\n        val Fld02lenint=RequestFields.Field02.length\r\n        if(RequestFields.Field02.length % 2 !=0)\r\n        {\r\n            fieldLength = (Fld02lenint+1).toString().length / 2\r\n        }\r\n        else {\r\n            fieldLength = Fld02lenint.toString().length / 2\r\n        }\r\n        Log.d(\"TransData\", \"mti.........: \" + Fld02lenint)\r\n\r\n        val  Fld02lenstr= Array(fieldLength) { \"\" }\r\n\r\n        charArraylenF02 = Fld02lenint.toString().toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            Fld02lenstr[j] = \"${charArraylenF02[i]}${charArraylenF02[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        fieldLength = RequestFields.Field02.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field02}\")\r\n\r\n        val  fld02= Array(fieldLength) { \"\" }\r\n        charArrayF02 = RequestFields.Field02.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld02[j] = \"${charArrayF02[i]}${charArrayF02[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field02/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field03.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field03}\")\r\n\r\n        val  fld03= Array(fieldLength) { \"\" }\r\n        charArrayF03 = RequestFields.Field03.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld03[j] = \"${charArrayF03[i]}${charArrayF03[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field03/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field04.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field04}\")\r\n\r\n        val  fld04= Array(fieldLength) { \"\" }\r\n        charArrayF04 = RequestFields.Field04.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld04[j] = \"${charArrayF04[i]}${charArrayF04[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field04/\r\n\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field11.length / 2\r\n        Log.d(\"TransData\", \"headertryF11.........: ${RequestFields.Field11}\")\r\n\r\n        val  fld11= Array(fieldLength) { \"\" }\r\n        charArrayF11 = RequestFields.Field11.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld11[j] = \"${charArrayF11[i]}${charArrayF11[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field11/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field12.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field12}\")\r\n\r\n        val  fld12= Array(fieldLength) { \"\" }\r\n        charArrayF12 = RequestFields.Field12.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld12[j] = \"${charArrayF12[i]}${charArrayF12[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field12/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field13.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field13}\")\r\n\r\n        val  fld13= Array(fieldLength) { \"\" }\r\n        charArrayF13 = RequestFields.Field13.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld13[j] = \"${charArrayF13[i]}${charArrayF13[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field13/\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field14.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field14}\")\r\n\r\n        val  fld14= Array(fieldLength) { \"\" }\r\n        charArrayF14 = RequestFields.Field14.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld14[j] = \"${charArrayF14[i]}${charArrayF14[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field14/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field22.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field22}\")\r\n\r\n        val  fld22= Array(fieldLength) { \"\" }\r\n        charArrayF22 = RequestFields.Field22.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld22[j] = \"${charArrayF22[i]}${charArrayF22[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field22/\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field24.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field24}\")\r\n\r\n        val  fld24= Array(fieldLength) { \"\" }\r\n        charArrayF24 = RequestFields.Field24.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld24[j] = \"${charArrayF24[i]}${charArrayF24[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field24/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field25.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field25}\")\r\n\r\n        val  fld25= Array(fieldLength) { \"\" }\r\n        charArrayF25 = RequestFields.Field25.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld25[j] = \"${charArrayF25[i]}${charArrayF25[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field25/\r\n        //**************************************************************\r\n        val Fld35lenint=RequestFields.Field35.length\r\n        if(RequestFields.Field35.length % 2 !=0)\r\n        {\r\n            fieldLength = (Fld35lenint+1).toString().length / 2\r\n        }\r\n        else {\r\n            fieldLength = Fld35lenint.toString().length / 2\r\n        }\r\n        Log.d(\"TransData\", \"mti.........: \" + Fld35lenint)\r\n\r\n        val fld35len  = Array(fieldLength) { \"\" }\r\n\r\n        charArraylenF35 = Fld35lenint.toString().toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld35len[j] = \"${charArraylenF35[i]}${charArraylenF35[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field35.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field35}\")\r\n\r\n        val  fld35= Array(fieldLength) { \"\" }\r\n        charArrayF35 = RequestFields.Field35.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld35[j] = \"${charArrayF35[i]}${charArrayF35[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field35/\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field37.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field37}\")\r\n\r\n        val  fld37= Array(fieldLength) { \"\" }\r\n        charArrayF37 = RequestFields.Field37.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld37[j] = \"${charArrayF37[i]}${charArrayF37[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field37/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field38.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field38}\")\r\n\r\n        val  fld38= Array(fieldLength) { \"\" }\r\n        charArrayF38 = RequestFields.Field38.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld38[j] = \"${charArrayF38[i]}${charArrayF38[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field38/\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field39.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field39}\")\r\n\r\n        val  fld39= Array(fieldLength) { \"\" }\r\n        charArrayF39 = RequestFields.Field39.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld39[j] = \"${charArrayF39[i]}${charArrayF39[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field39/\r\n\r\n        //listOfByteArrays = mutableListOf<ByteArray>()\r\n        for (r in header.indices) {\r\n            listOfByteArraysHeader.add(HexUtil.hexStr2Byte(header[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysHeader\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysHeader) {\r\n            lengthOfHeader += byteArray1.size\r\n        }\r\n//*************************************************\r\n        for (r in mti.indices) {\r\n            listOfByteArraysMTI.add(HexUtil.hexStr2Byte(mti[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysMTI\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysMTI) {\r\n            lengthOfMTI += byteArray1.size\r\n        }\r\n        //val listOfByteArrays1 = mutableListOf<ByteArray>()\r\n        for (r in primarybitmap.indices) {\r\n            listOfByteArraysBMP.add(HexUtil.hexStr2Byte(primarybitmap[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays1: $listOfByteArraysBMP\")\r\n//*************************************************\r\n        lengthOfBitmap = 0\r\n        for (byteArray1 in listOfByteArraysBMP) {\r\n            lengthOfBitmap += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in Fld02lenstr.indices) {\r\n            listOfByteArrayslenF02.add(HexUtil.hexStr2Byte(Fld02lenstr[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArrayslenF02\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArrayslenF02) {\r\n            lengthOfFlen02 += byteArray1.size\r\n        }\r\n        Log.d(TAG,\"lenf02\"+lengthOfFlen02)\r\n        for (r in fld02.indices) {\r\n            listOfByteArraysF02.add(HexUtil.hexStr2Byte(fld02[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF02\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF02) {\r\n            lengthOfF02 += byteArray1.size\r\n        }\r\n        Log.d(TAG,\"lenf02\"+lengthOfF02)\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld03.indices) {\r\n            listOfByteArraysF03.add(HexUtil.hexStr2Byte(fld03[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF03\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF03) {\r\n            lengthOfF03 += byteArray1.size\r\n        }\r\n\r\n        //********************************************************\r\n        for (r in fld04.indices) {\r\n            listOfByteArraysF04.add(HexUtil.hexStr2Byte(fld04[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF04\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF04) {\r\n            lengthOfF04 += byteArray1.size\r\n        }\r\n\r\n        //********************************************************\r\n        for (r in fld11.indices) {\r\n            listOfByteArraysF11.add(HexUtil.hexStr2Byte(fld11[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arraysf1111: $listOfByteArraysF11\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF11) {\r\n            lengthOfF11 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld12.indices) {\r\n            listOfByteArraysF12.add(HexUtil.hexStr2Byte(fld12[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF12\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF12) {\r\n            lengthOfF12 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld13.indices) {\r\n            listOfByteArraysF13.add(HexUtil.hexStr2Byte(fld13[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF13\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF13) {\r\n            lengthOfF13 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld14.indices) {\r\n            listOfByteArraysF14.add(HexUtil.hexStr2Byte(fld14[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF14\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF14) {\r\n            lengthOfF14 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld22.indices) {\r\n            listOfByteArraysF22.add(HexUtil.hexStr2Byte(fld22[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF22\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF22) {\r\n            lengthOfF22 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld24.indices) {\r\n            listOfByteArraysF24.add(HexUtil.hexStr2Byte(fld24[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF24\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF24) {\r\n            lengthOfF24 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld25.indices) {\r\n            listOfByteArraysF25.add(HexUtil.hexStr2Byte(fld25[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF25\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF25) {\r\n            lengthOfF25 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld35len.indices) {\r\n            listOfByteArrayslenF35.add(HexUtil.hexStr2Byte(fld35len[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArrayslenF35\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArrayslenF35) {\r\n            lengthOflenF35 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        for (r in fld35.indices) {\r\n            listOfByteArraysF35.add(HexUtil.hexStr2Byte(fld35[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF35\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF35) {\r\n            lengthOfF35 += byteArray1.size\r\n\r\n        }\r\n\r\n        //********************************************************\r\n        for (r in fld37.indices) {\r\n            listOfByteArraysF37.add(HexUtil.hexStr2Byte(fld37[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF37\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF37) {\r\n            lengthOfF37 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld38.indices) {\r\n            listOfByteArraysF38.add(HexUtil.hexStr2Byte(fld38[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF38\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF38) {\r\n            lengthOfF38 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //********************************************************\r\n        for (r in fld39.indices) {\r\n            listOfByteArraysF39.add(HexUtil.hexStr2Byte(fld39[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF39\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF39) {\r\n            lengthOfF39 += byteArray1.size\r\n        }\r\n        //********************************************************\r\n        //*****************************************************************start of Field 60/\r\n        //***********************************************************************\r\n        fieldLength = RequestFields.Field60.length / 2\r\n        Log.d(\"TransData\", \"headertry 60.........: ${RequestFields.Field60}\")\r\n\r\n        val  fld60= Array(fieldLength) { \"\" }\r\n        charArrayF60 = RequestFields.Field60.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld60[j] = \"${charArrayF60[i]}${charArrayF60[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld60.indices) {\r\n            listOfByteArraysF60.add(HexUtil.hexStr2Byte(fld60[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arraysF60: $listOfByteArraysF60\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF60) {\r\n            lengthOfF60 += byteArray1.size\r\n        }\r\n\r\n        //***********************************************************************\r\n        fieldLength = RequestFields.Field62.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field62}\")\r\n\r\n        val  fld62= Array(fieldLength) { \"\" }\r\n        charArrayF62 = RequestFields.Field62.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld62[j] = \"${charArrayF62[i]}${charArrayF62[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld62.indices) {\r\n            listOfByteArraysF62.add(HexUtil.hexStr2Byte(fld62[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF62\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF62) {\r\n            lengthOfF62 += byteArray1.size\r\n        }\r\n        //***********************************************************************\r\n        fieldLength = RequestFields.Field63.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field63}\")\r\n\r\n        val  fld63= Array(fieldLength) { \"\" }\r\n        charArrayF63 = RequestFields.Field63.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld63[j] = \"${charArrayF63[i]}${charArrayF63[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //********************************************************\r\n        for (r in fld63.indices) {\r\n            listOfByteArraysF63.add(HexUtil.hexStr2Byte(fld63[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF63\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF63) {\r\n            lengthOfF63 += byteArray1.size\r\n        }\r\n        val f60EndValue4Settlement=HexUtil.hexStr2Byte(HexUtil.asc2Hex(\"000020\"))\r\n        val f63EndValue4Settlement=HexUtil.hexStr2Byte(HexUtil.asc2Hex(TransData.RequestFields.endValue4F63))\r\n        val field04 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field04))\r\n        val field11 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field11))\r\n        Log.d(TAG, \"f11 $field11\")\r\n\r\n        //field 02 and its length\r\n\r\n\r\n        val field41 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field41))\r\n        val field42 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field42))\r\n        val field37 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field37))\r\n        val field38 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field38))\r\n        val field39 = HexUtil.hexStr2Byte(HexUtil.asc2Hex(RequestFields.Field39))\r\n        var  buffer: ByteBuffer? =null\r\n        if(txnType.equals(Txntype.keydownload)){\r\n\r\n           buffer=ByteBuffer.allocate(lengthOfHeader+\r\n                   lengthOfMTI+\r\n                   lengthOfBitmap+\r\n                   lengthOfF03+\r\n                   lengthOfF11+\r\n                   lengthOfF24+\r\n                   field41.size +\r\n                   field42.size+\r\n                   lengthOfF62+field11.size\r\n           )\r\n            buffer.apply {\r\n                for (byteArray1 in listOfByteArraysHeader) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysMTI) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysBMP) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF03) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF11) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF24) {\r\n                    put(byteArray1)\r\n                }\r\n                put(field41)\r\n                put(field42)\r\n                for (byteArray in listOfByteArraysF62) {\r\n                    put(byteArray)\r\n                }\r\n                Log.d(TAG, \"f11P $field11\")\r\n\r\n                put(field11)\r\n\r\n\r\n            }\r\n        }else if (txnType.equals(Txntype.settlement)){\r\n            buffer=ByteBuffer.allocate(\r\n                lengthOfHeader+\r\n                    lengthOfMTI+\r\n                    lengthOfBitmap+\r\n                    lengthOfF03+\r\n                    lengthOfF11+\r\n                    lengthOfF24+\r\n                    field41.size +\r\n                    field42.size+\r\n                    lengthOfF60+\r\n                    f60EndValue4Settlement.size+\r\n                    lengthOfF62+\r\n                    lengthOfF63+\r\n                        f63EndValue4Settlement.size\r\n            )\r\n            buffer.apply {\r\n                for (byteArray1 in listOfByteArraysHeader) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysMTI) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysBMP) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF03) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF11) {\r\n                    put(byteArray1)\r\n                }\r\n                for (byteArray1 in listOfByteArraysF24) {\r\n                    put(byteArray1)\r\n                }\r\n                put(field41)\r\n                put(field42)\r\n                for (byteArray in listOfByteArraysF60) {\r\n                    put(byteArray)\r\n                }\r\n                put(f60EndValue4Settlement)\r\n\r\n\r\n                for (byteArray in listOfByteArraysF62) {\r\n                    put(byteArray)\r\n                }\r\n                Log.d(TAG, \"f11P $field11\")\r\n                for (byteArray in listOfByteArraysF63) {\r\n                    put(byteArray)\r\n                }\r\n                put(f63EndValue4Settlement)\r\n\r\n\r\n\r\n\r\n        }\r\n        } else if(txnType.equals(Txntype.reversal)){\r\n\r\n            buffer = ByteBuffer.allocate(\r\n                           lengthOfHeader+\r\n                                   lengthOfMTI+\r\n                                           lengthOfBitmap+\r\n                                           lengthOfFlen02+\r\n                                           lengthOfF02+\r\n                                           lengthOfF03 +\r\n                                           lengthOfF04 +\r\n                                           lengthOfF11 +\r\n                                           lengthOfF12 +\r\n                                           lengthOfF13 +\r\n                                          lengthOfF14 +\r\n                                          lengthOfF22 +\r\n                                          lengthOfF24 +\r\n                                          lengthOfF25+\r\n                                          lengthOflenF35+\r\n                                          lengthOfF35 +\r\n                                           field37.size +\r\n                                           field38.size +\r\n                                           field39.size +\r\n                                          field41.size +\r\n                                          field42.size+\r\n                                          lengthOfF60+field04.size+\r\n                                           lengthOfF62+field11.size)\r\n        buffer.apply {\r\n            for (byteArray1 in listOfByteArraysHeader) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysMTI) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysBMP) {\r\n                put(byteArray1)\r\n            }\r\n\r\n            //for loop to put the bit map in buffer\r\n\r\n\r\n            for (byteArray1 in listOfByteArrayslenF02) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF02) {\r\n                put(byteArray1)\r\n            }\r\n\r\n            for (byteArray1 in listOfByteArraysF03) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF04) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF11) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF12) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF13) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF14) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF22) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF24) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF25) {\r\n                put(byteArray1)\r\n            }\r\n\r\n            for (byteArray1 in listOfByteArrayslenF35) {\r\n                put(byteArray1)\r\n            }\r\n            for (byteArray1 in listOfByteArraysF35) {\r\n                put(byteArray1)\r\n            }\r\n            put(field37)\r\n            put(field38)\r\n            put(field39)\r\n\r\n\r\n            put(field41)\r\n            put(field42)\r\n\r\n            for (byteArray in listOfByteArraysF60) {\r\n                put(byteArray)\r\n            }\r\n            put(field04)\r\n\r\n\r\n            for (byteArray in listOfByteArraysF62) {\r\n                put(byteArray)\r\n            }\r\n            put(field11)\r\n        }\r\n        } else if(txnType.equals(Txntype.purchase)){\r\n             buffer = ByteBuffer.allocate(\r\n                 lengthOfHeader+\r\n                         lengthOfMTI+\r\n                         lengthOfBitmap +\r\n                         lengthOfFlen02+\r\n                         lengthOfF02+\r\n                         lengthOfF03 +\r\n                         lengthOfF04 +\r\n                         lengthOfF11 +\r\n                         lengthOfF14 +\r\n                         lengthOfF22 +\r\n                         lengthOfF24 +\r\n                         lengthOfF25+\r\n                         lengthOflenF35+\r\n                         lengthOfF35 +\r\n                         field41.size +\r\n                         field42.size\r\n\r\n             )\r\n\r\n\r\n             buffer?.apply {\r\n                 for (byteArray1 in listOfByteArraysHeader) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysMTI) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysBMP) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n                 //for loop to put the bit map in buffer\r\n\r\n\r\n                 for (byteArray1 in listOfByteArrayslenF02) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF02) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n                 for (byteArray1 in listOfByteArraysF03) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF04) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF11) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF14) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF22) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF24) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF25) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n                 for (byteArray1 in listOfByteArrayslenF35) {\r\n                     put(byteArray1)\r\n                 }\r\n                 for (byteArray1 in listOfByteArraysF35) {\r\n                     put(byteArray1)\r\n                 }\r\n\r\n\r\n                 put(field41)\r\n                 put(field42)\r\n\r\n             }\r\n         }\r\n        //**************************************************************\r\n\r\n         //********************************************************\r\n\r\n        //**************************************************************\r\n        fieldLength = RequestFields.Field52.length / 2\r\n        Log.d(\"TransData\", \"headertry52.........: ${RequestFields.Field52}\")\r\n\r\n        val  fld52= Array(fieldLength) { \"\" }\r\n        charArrayF52 = RequestFields.Field52.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld52[j] = \"${charArrayF52[i]}${charArrayF52[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n        //************************************************ end field52/\r\n        //********************************************************\r\n        for (r in fld52.indices) {\r\n            listOfByteArraysF52.add(HexUtil.hexStr2Byte(fld52[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays 52: $listOfByteArraysF52\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF52) {\r\n            lengthOfF52 += byteArray1.size\r\n        }\r\n        //pinblock for online pin\r\n\r\n        val bufferForF52 = ByteBuffer.allocate(lengthOfF52 )\r\n        bufferForF52.apply {\r\n           // put(lengthOfF52.toString().toByteArray())\r\n            for (byteArray1 in listOfByteArraysF52) {\r\n                put(byteArray1)\r\n            }\r\n        }\r\n\r\n        //**************************************************************\r\n        val Fld55lenint=RequestFields.Field55.length/2\r\n        var Fld55lenstr=Fld55lenint.toString()\r\n        Fld55lenstr=\"0\"+Fld55lenstr\r\n\r\n\r\n        fieldLength = Fld55lenstr.length/2\r\n\r\n        Log.d(\"TransData\", \"Fld55lenstr.........: \" + Fld55lenstr)\r\n\r\n        val fld55len  = Array(fieldLength) { \"\" }\r\n\r\n        charArraylenF55 = Fld55lenstr.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld55len[j] = \"${charArraylenF55[i]}${charArraylenF55[i + 1]}\"\r\n            j++\r\n        }\r\n        for (r in fld55len.indices) {\r\n            listOfByteArrayslenF55.add(HexUtil.hexStr2Byte(fld55len[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArrayslenF55\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArrayslenF55) {\r\n            lengthOflenF55 += byteArray1.size\r\n        }\r\n\r\n        //Field 55\r\n\r\n        fieldLength = RequestFields.Field55.length / 2\r\n        Log.d(\"TransData\", \"headertry.........: ${RequestFields.Field55}\")\r\n\r\n        val  fld55= Array(fieldLength) { \"\" }\r\n        charArrayF55 = RequestFields.Field55.toCharArray()\r\n\r\n        j=0\r\n        for (i in 0 until fieldLength * 2 step 2) {\r\n            fld55[j] = \"${charArrayF55[i]}${charArrayF55[i + 1]}\"\r\n            j++\r\n        }\r\n\r\n\r\n        //************************************************ end field52/\r\n        //********************************************************\r\n        for (r in fld55.indices) {\r\n            listOfByteArraysF55.add(HexUtil.hexStr2Byte(fld55[r]))\r\n        }\r\n        Log.d(TAG, \"list of byte arrays: $listOfByteArraysF55\")\r\n\r\n\r\n        for (byteArray1 in listOfByteArraysF55) {\r\n            lengthOfF55 += byteArray1.size\r\n        }\r\n\r\n\r\n\r\n        //Log.d(TAG, \"len55:\" + Utility.byte2HexStr(len_byte))\r\n\r\n\r\n\r\n        val byteBufferF55nF62 = ByteBuffer.allocate(lengthOflenF55 +\r\n                lengthOfF55+\r\n                lengthOfF62+field11.size)\r\n\r\n        byteBufferF55nF62.apply {\r\n            for (byteArray in listOfByteArrayslenF55) {\r\n                put(byteArray)\r\n            }\r\n            for (byteArray in listOfByteArraysF55) {\r\n                put(byteArray)\r\n            }\r\n            for (byteArray in listOfByteArraysF62) {\r\n                put(byteArray)\r\n            }\r\n            put(field11)\r\n        }\r\n\r\n//tetttttttttttttttt\r\n        val bufferF55nF62 = byteBufferF55nF62.array()\r\n        lateinit var combinedBuffer: ByteBuffer\r\n        val firstBuffer: ByteArray = buffer?.array() ?: \"\".toByteArray()\r\n        Log.d(TAG, \"Sent field2to42....:\" + HexUtil.toHexString(firstBuffer))\r\n        val field52: ByteArray = bufferForF52.array()\r\n        Log.d(TAG, \"Sent field52....:\" + HexUtil.toHexString(field52))\r\n\r\n\r\n        if(txnType.equals(Txntype.reversal)){\r\n            Log.d(TAG, \"reversalllllll..:\" )\r\n            combinedBuffer = ByteBuffer.allocate(firstBuffer.size )\r\n            combinedBuffer.apply {\r\n                put(firstBuffer)\r\n            }\r\n        }else if(txnType.equals(Txntype.purchase)){\r\n            if(isOnlinePin){\r\n                combinedBuffer = ByteBuffer.allocate(firstBuffer.size +field52.size+ bufferF55nF62.size)\r\n                combinedBuffer.apply {\r\n                    put(firstBuffer)\r\n                    put(field52)\r\n                    put(bufferF55nF62)\r\n                }\r\n\r\n\r\n                }\r\n            else{\r\n\r\n                combinedBuffer = ByteBuffer.allocate(firstBuffer.size + bufferF55nF62.size)\r\n                combinedBuffer.apply {\r\n                    put(firstBuffer)\r\n                    put(bufferF55nF62)\r\n                }\r\n\r\n            }\r\n\r\n        }else if(txnType.equals(Txntype.settlement)){\r\n            combinedBuffer = ByteBuffer.allocate(firstBuffer.size )\r\n            combinedBuffer.apply {\r\n                put(firstBuffer)\r\n            }\r\n        }else if(txnType.equals(Txntype.keydownload)){\r\n            combinedBuffer = ByteBuffer.allocate(firstBuffer.size )\r\n            combinedBuffer.apply {\r\n                put(firstBuffer)\r\n            }\r\n        }\r\n\r\n        val result: ByteArray = combinedBuffer?.array() ?: \"\".toByteArray()\r\n        Log.d(TAG, \"Sent packet....:\" + HexUtil.toHexString(result))\r\n\r\n        return result\r\n    }\r\n    fun unpackResponseFields(responseMessage: String) {\r\n        ResponseFields.Header=responseMessage.substring(0,14)\r\n        Log.d(TAG,\"header:\"+ResponseFields.Header)\r\n        ResponseFields.MTI = responseMessage.substring(14, 18)\r\n        //val MTI = hex2Asc(ResponseFields.MTI)\r\n        Log.d(TAG,\"header:\"+ResponseFields.MTI)\r\n\r\n        ResponseFields.primaryBitmap = responseMessage.substring(18, 34)\r\n        println(\"primarybitmap : ${ResponseFields.primaryBitmap}\")\r\n\r\n        val responseBody = responseMessage.substring(34)\r\n        println(\"responsebody : $responseBody\")\r\n\r\n        val binaryBitmap1 = hex2Binary(ResponseFields.primaryBitmap)\r\n        println(\"binarybitmap1 : $binaryBitmap1\")\r\n\r\n        assignValue2ResponseFields(binaryBitmap1, responseBody)\r\n    }\r\n    fun ClearVariables(){\r\n        ResponseFields.Header=\"\"\r\n        ResponseFields.MTI=\"\"\r\n        ResponseFields.primaryBitmap=\"\"\r\n        ResponseFields.Field02=\"\"\r\n        ResponseFields.Field03=\"\"\r\n        ResponseFields.Field04=\"\"\r\n        ResponseFields.Field07=\"\"\r\n        ResponseFields.Field11=\"\"\r\n        ResponseFields.Field12=\"\"\r\n        ResponseFields.Field13=\"\"\r\n        ResponseFields.Field22=\"\"\r\n        ResponseFields.Field24=\"\"\r\n        ResponseFields.Field25=\"\"\r\n        ResponseFields.Field35=\"\"\r\n        ResponseFields.Field37=\"\"\r\n        ResponseFields.Field38=\"\"\r\n        ResponseFields.Field39=\"\"\r\n        ResponseFields.Field41=\"\"\r\n        ResponseFields.Field42=\"\"\r\n        ResponseFields.Field49=\"\"\r\n        ResponseFields.Field52=\"\"\r\n        ResponseFields.Field55=\"\"\r\n        ResponseFields.Field62=\"\"\r\n\r\n        RequestFields. Header=\"\"\r\n        RequestFields. MTI=\"\"\r\n        RequestFields. primaryBitmap=\"\"\r\n        RequestFields. Field02=\"\"\r\n        RequestFields. Field03=\"\"\r\n        RequestFields. Field04=\"\"\r\n        RequestFields. Field07=\"\"\r\n        RequestFields. Field11=\"\"\r\n        RequestFields. Field12=\"\"\r\n        RequestFields. Field13=\"\"\r\n        RequestFields. Field14=\"\"\r\n        RequestFields. Field22=\"\"\r\n        RequestFields. Field24=\"\"\r\n        RequestFields. Field25=\"\"\r\n        RequestFields. Field35=\"\"\r\n        RequestFields. Field37=\"\"\r\n        RequestFields. Field38=\"\"\r\n        RequestFields. Field39= \"\"\r\n        RequestFields. Field41=\"\"\r\n        RequestFields. Field42=\"\"\r\n        RequestFields. Field49=\"\"\r\n        RequestFields. Field52=\"\"\r\n        RequestFields. Field55=\"\"\r\n        RequestFields. Field60=\"\"\r\n        RequestFields. Field62=\"\"\r\n        RequestFields. Field63=\"\"\r\n        RequestFields. endValue4F63=\"\"\r\n\r\n      }\r\n\r\n\r\n\r\n    fun fillGapSequence(data: String, size: Int): String {\r\n        var result = data\r\n        while (result.length != size) {\r\n            result = \"0\" + result\r\n        }\r\n        return result\r\n    }\r\n\r\n    fun assignValue2ResponseFields(binaryBitmap: String, responseBody: String) {\r\n        var n = 0\r\n        var prefix = \"\"\r\n        val charArray = binaryBitmap.toCharArray()\r\n        val strArrayBitmap = Array(charArray.size) { i -> charArray[i].toString() }\r\n\r\n        println(\"binaryBitmap1 : ${strArrayBitmap[1]}\")\r\n\r\n        for (i in 0 until 64) {\r\n            if (strArrayBitmap[i] == \"1\") {\r\n                val j = i + 1\r\n                println(\"bitmap available : $j\")\r\n                when (j) {\r\n\r\n                    3 -> {\r\n                        ResponseFields.Field03 = responseBody.substring(n, n + 6)\r\n                        Log.d(TAG, \"field03: ${ResponseFields.Field03}\")\r\n                        n += 6\r\n                    }\r\n                    4 -> {\r\n                        ResponseFields.Field04 = responseBody.substring(n, n + 12)\r\n                        Log.d(TAG, \"field04: ${ResponseFields.Field04}\")\r\n                        n += 12\r\n                    }\r\n\r\n                    11 -> {\r\n                        ResponseFields.Field11 = responseBody.substring(n, n + 6)\r\n                        Log.d(TAG, \"field11: ${ResponseFields.Field11}\")\r\n                        n += 6\r\n                    }\r\n                    12 -> {\r\n                        ResponseFields.Field12 = responseBody.substring(n, n + 6)\r\n                        Log.d(TAG, \"field12: ${ResponseFields.Field12}\")\r\n                        n += 6\r\n                    }\r\n                    13 -> {\r\n                        ResponseFields.Field13 = responseBody.substring(n, n + 4)\r\n                        Log.d(TAG, \"field13: ${ResponseFields.Field13}\")\r\n                        n += 4\r\n                    }\r\n                    24 -> {\r\n                        ResponseFields.Field24 = responseBody.substring(n, n + 4)\r\n                        Log.d(TAG, \"field24: ${ResponseFields.Field24}\")\r\n                        n += 4\r\n                    }\r\n                    37 -> {\r\n                        ResponseFields.Field37 = hex2Asc(responseBody.substring(n, n + 24))\r\n                        Log.d(TAG, \"field37: ${ResponseFields.Field37}\")\r\n                        n += 24\r\n                    }\r\n                    38 -> {\r\n                        ResponseFields.Field38 = hex2Asc(responseBody.substring(n, n + 12))\r\n                        Log.d(TAG, \"field38: ${ResponseFields.Field38}\")\r\n                        n += 12\r\n                    }\r\n                    39 -> {\r\n                        ResponseFields.Field39 = hex2Asc(responseBody.substring(n, n + 4))\r\n                        Log.d(TAG, \"field39: ${ResponseFields.Field39}\")\r\n                        n += 4\r\n                    }\r\n                    41 -> {\r\n                        ResponseFields.Field41 = hex2Asc(responseBody.substring(n, n + 16))\r\n                        Log.d(TAG, \"field41: ${ResponseFields.Field41}\")\r\n                        n += 16\r\n                    }\r\n                    49 -> {\r\n                        ResponseFields.Field49 = responseBody.substring(n, n + 3)\r\n                        Log.d(TAG, \"field49: ${ResponseFields.Field49}\")\r\n                        n += 3\r\n                    }\r\n                    55 -> {\r\n                        prefix = responseBody.substring(n, n + 4)\r\n                        println(\"prefix: $prefix\")\r\n                        val num = prefix\r\n                        n += 4\r\n                        ResponseFields.Field55 = responseBody.substring(n)\r\n                        Log.d(TAG, \"field55: ${ResponseFields.Field55}\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fun hex2Binary(hexString: String): String {\r\n        val binary = StringBuilder()\r\n        for (i in hexString.indices) {\r\n            val hexChar = hexString[i]\r\n            val binaryString = Integer.toBinaryString(Integer.parseInt(hexChar.toString(), 16))\r\n            binary.append(String.format(\"%4s\", binaryString).replace(' ', '0'))\r\n        }\r\n        return binary.toString()\r\n    }\r\n\r\n    fun hex2Asc(hexString: String): String {\r\n        val output = StringBuilder()\r\n        for (i in hexString.indices step 2) {\r\n            val hex = hexString.substring(i, i + 2)\r\n            output.append(hex.toInt(16).toChar())\r\n        }\r\n        return output.toString()\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt b/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt
--- a/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt	(revision 29ffa62f51d496ee438f06cf3cdcfc2d5a3a4aba)
+++ b/app/src/main/java/net/geidea/payment/transaction/model/TransData.kt	(date 1729587904871)
@@ -28,6 +28,7 @@
     var amount:Long = 0L
     var pinBlock = ""
     var transactionReqDateTime = ""
+    //
     var aid = ""
     var rrn = ""
     var stan = ""
